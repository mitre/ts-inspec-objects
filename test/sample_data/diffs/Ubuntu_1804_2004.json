{
  "addedControlIDs": [
    "account_expiration",
    "account_expiration",
    "account_expiration",
    "account_expiration",
    "account_expiration",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-banners",
    "accounts-pam",
    "accounts-pam",
    "accounts-physical",
    "accounts-physical",
    "accounts-physical",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "accounts-session",
    "aide",
    "aide",
    "aide",
    "aide",
    "apparmor",
    "apparmor",
    "apparmor",
    "apparmor",
    "apparmor",
    "apport",
    "apt",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_dac_actions",
    "audit_execution_acl_commands",
    "audit_execution_acl_commands",
    "audit_execution_selinux_commands",
    "audit_file_deletion_events",
    "audit_file_deletion_events",
    "audit_file_deletion_events",
    "audit_file_deletion_events",
    "audit_file_deletion_events",
    "audit_file_modification",
    "audit_file_modification",
    "audit_file_modification",
    "audit_file_modification",
    "audit_file_modification",
    "audit_file_modification",
    "audit_kernel_module_loading",
    "audit_kernel_module_loading",
    "audit_kernel_module_loading",
    "audit_login_events",
    "audit_login_events",
    "audit_login_events",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_privileged_commands",
    "audit_time_rules",
    "audit_time_rules",
    "audit_time_rules",
    "audit_time_rules",
    "audit_time_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditd_configure_rules",
    "auditing",
    "auditing",
    "auditing",
    "auditing",
    "auditing",
    "avahi_configuration",
    "base",
    "bootloader-grub2",
    "bootloader-zipl",
    "bootloader-zipl",
    "certified-vendor",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configure_auditd_data_retention",
    "configuring_ipv6",
    "configuring_ipv6",
    "configuring_ipv6",
    "configuring_ipv6",
    "configuring_ipv6",
    "configuring_ipv6",
    "configuring_ipv6",
    "console_screen_locking",
    "coredumps",
    "coredumps",
    "coredumps",
    "coredumps",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "cron_and_at",
    "crypto",
    "crypto",
    "deprecated",
    "deprecated",
    "deprecated",
    "deprecated",
    "deprecated",
    "dhcp_client_configuration",
    "dhcp_server_configuration",
    "disable_avahi_group",
    "disable_avahi_group",
    "disabling_dhcp_server",
    "disabling_dns_server",
    "disabling_dovecot",
    "disabling_httpd",
    "disabling_ipv6",
    "disabling_ipv6",
    "disabling_netfs",
    "disabling_nfs_services",
    "disabling_nfs_services",
    "disabling_samba",
    "disabling_snmp_service",
    "disabling_squid",
    "disabling_vsftpd",
    "disabling_xwindows",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "disk_partitioning",
    "enable_execshield_settings",
    "enable_execshield_settings",
    "enable_nx",
    "endpoint_security_software",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "ensure_rsyslog_log_file_configuration",
    "entropy",
    "files",
    "files",
    "files",
    "files",
    "files",
    "files",
    "files",
    "files",
    "files",
    "files",
    "fips",
    "fips",
    "fips",
    "fips",
    "ftp_configure_vsftpd",
    "ftp_restrict_users",
    "gnome",
    "gnome",
    "gnome_login_screen",
    "gnome_login_screen",
    "gnome_screen_locking",
    "gnome_system_settings",
    "gui_login_banner",
    "gui_login_banner",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "harden_exim4_config",
    "inetd_and_xinetd",
    "inetd_and_xinetd",
    "integrity",
    "integrity",
    "iptables_activation",
    "iptables_activation",
    "iptables_activation",
    "iptables_ensure_loopback_configured",
    "iptables_ensure_loopback_configured",
    "iptables_ensure_loopback_configured",
    "iptables_ensure_loopback_configured",
    "iptables_ensure_loopback_configured",
    "iptables_ensure_loopback_configured",
    "iptables_ruleset_modifications",
    "iptables_ruleset_modifications",
    "iptables_ruleset_modifications",
    "iptables_ruleset_modifications",
    "journald",
    "journald",
    "journald",
    "kerberos",
    "locking_out_password_attempts",
    "locking_out_password_attempts",
    "locking_out_password_attempts",
    "locking_out_password_attempts",
    "log_rotation",
    "log_rotation",
    "logging",
    "logging",
    "logging",
    "logging",
    "logging",
    "mail",
    "mail",
    "mcafee_hbss_software",
    "mcafee_security_software",
    "mounting",
    "mounting",
    "mounting",
    "mounting",
    "mounting",
    "mounting",
    "mounting",
    "mounting",
    "network-iptables",
    "network-iptables",
    "network-iptables",
    "network-nftables",
    "network-nftables",
    "network-nftables",
    "network-nftables",
    "network-nftables",
    "network-nftables",
    "network-nftables",
    "network-ufw",
    "network-ufw",
    "network-ufw",
    "network-ufw",
    "network-ufw",
    "network-ufw",
    "network-uncommon",
    "network-uncommon",
    "network-uncommon",
    "network-uncommon",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_and_router_parameters",
    "network_host_parameters",
    "network_host_parameters",
    "network_host_parameters",
    "network_ssl",
    "nfs_configuring_servers",
    "nftables_ensure_loopback_configured",
    "nftables_ensure_loopback_configured",
    "nftables_ensure_loopback_configured",
    "non-uefi",
    "non-uefi",
    "non-uefi",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "ntp",
    "obsolete",
    "openldap_client",
    "openldap_server",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "partitions",
    "password_expiration",
    "password_expiration",
    "password_expiration",
    "password_expiration",
    "password_expiration",
    "password_expiration",
    "password_expiration",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_quality_pwquality",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "password_storage",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_important_account_files",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_var_log_dir",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "permissions_within_important_dirs",
    "postfix_client",
    "postfix_client",
    "postfix_client",
    "printing",
    "printing",
    "r_services",
    "r_services",
    "r_services",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "restrict_at_cron_users",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_logins",
    "root_paths",
    "root_paths",
    "rsyslog_accepting_remote_messages",
    "rsyslog_accepting_remote_messages",
    "rsyslog_accepting_remote_messages",
    "rsyslog_accepting_remote_messages",
    "rsyslog_sending_messages",
    "selinux",
    "set_password_hashing_algorithm",
    "smart_card_login",
    "smart_card_login",
    "smart_card_login",
    "smart_card_login",
    "smart_card_login",
    "smart_card_login",
    "smart_card_login",
    "software",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "ssh_server",
    "sshd_user_access_limited",
    "sshd_user_access_limited",
    "sshd_user_access_limited",
    "sshd_user_access_limited",
    "sssd",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "sudo",
    "system-tools",
    "system-tools",
    "talk",
    "telnet",
    "uefi",
    "ufw_ensure_loopback_configured",
    "ufw_ensure_loopback_configured",
    "ufw_ensure_loopback_configured",
    "ufw_ensure_loopback_configured",
    "updating",
    "user_umask",
    "user_umask",
    "user_umask",
    "user_umask",
    "user_umask",
    "wireless_software"
  ],
  "removedControlIDs": [
    "C-1.1.1.1",
    "C-1.1.1.2",
    "C-1.1.1.3",
    "C-1.1.1.4",
    "C-1.1.1.5",
    "C-1.1.1.6",
    "C-1.1.1.7",
    "C-1.1.1.8",
    "C-1.1.10",
    "C-1.1.11",
    "C-1.1.12",
    "C-1.1.13",
    "C-1.1.14",
    "C-1.1.15",
    "C-1.1.16",
    "C-1.1.17",
    "C-1.1.18",
    "C-1.1.19",
    "C-1.1.2",
    "C-1.1.20",
    "C-1.1.21",
    "C-1.1.22",
    "C-1.1.23",
    "C-1.1.3",
    "C-1.1.4",
    "C-1.1.5",
    "C-1.1.6",
    "C-1.1.7",
    "C-1.1.8",
    "C-1.1.9",
    "C-1.2.1",
    "C-1.2.2",
    "C-1.3.1",
    "C-1.3.2",
    "C-1.3.3",
    "C-1.4.1",
    "C-1.4.2",
    "C-1.5.1",
    "C-1.5.2",
    "C-1.5.3",
    "C-1.5.4",
    "C-1.6.1",
    "C-1.6.2",
    "C-1.6.3",
    "C-1.6.4",
    "C-1.7.1.1",
    "C-1.7.1.2",
    "C-1.7.1.3",
    "C-1.7.1.4",
    "C-1.8.1.1",
    "C-1.8.1.2",
    "C-1.8.1.3",
    "C-1.8.1.4",
    "C-1.8.1.5",
    "C-1.8.1.6",
    "C-1.8.2",
    "C-1.9",
    "C-2.1.1",
    "C-2.1.2",
    "C-2.2.1.1",
    "C-2.2.1.2",
    "C-2.2.1.3",
    "C-2.2.1.4",
    "C-2.2.10",
    "C-2.2.11",
    "C-2.2.12",
    "C-2.2.13",
    "C-2.2.14",
    "C-2.2.15",
    "C-2.2.16",
    "C-2.2.17",
    "C-2.2.2",
    "C-2.2.3",
    "C-2.2.4",
    "C-2.2.5",
    "C-2.2.6",
    "C-2.2.7",
    "C-2.2.8",
    "C-2.2.9",
    "C-2.3.1",
    "C-2.3.2",
    "C-2.3.3",
    "C-2.3.4",
    "C-2.3.5",
    "C-3.1.1",
    "C-3.1.2",
    "C-3.2.1",
    "C-3.2.2",
    "C-3.2.3",
    "C-3.2.4",
    "C-3.2.5",
    "C-3.2.6",
    "C-3.2.7",
    "C-3.2.8",
    "C-3.2.9",
    "C-3.3.1",
    "C-3.3.2",
    "C-3.3.3",
    "C-3.3.4",
    "C-3.3.5",
    "C-3.4.1",
    "C-3.4.2",
    "C-3.4.3",
    "C-3.4.4",
    "C-3.5.1.1",
    "C-3.5.2.1",
    "C-3.5.2.2",
    "C-3.5.2.3",
    "C-3.5.2.4",
    "C-3.5.2.5",
    "C-3.5.3.1",
    "C-3.5.3.2",
    "C-3.5.3.3",
    "C-3.5.3.4",
    "C-3.5.3.5",
    "C-3.5.3.6",
    "C-3.5.3.7",
    "C-3.5.3.8",
    "C-3.5.4.1.1",
    "C-3.5.4.1.2",
    "C-3.5.4.1.3",
    "C-3.5.4.1.4",
    "C-3.5.4.2.1",
    "C-3.5.4.2.2",
    "C-3.5.4.2.3",
    "C-3.5.4.2.4",
    "C-3.6",
    "C-3.7",
    "C-4.1.1.1",
    "C-4.1.1.2",
    "C-4.1.1.3",
    "C-4.1.1.4",
    "C-4.1.10",
    "C-4.1.11",
    "C-4.1.12",
    "C-4.1.13",
    "C-4.1.14",
    "C-4.1.15",
    "C-4.1.16",
    "C-4.1.17",
    "C-4.1.2.1",
    "C-4.1.2.2",
    "C-4.1.2.3",
    "C-4.1.3",
    "C-4.1.4",
    "C-4.1.5",
    "C-4.1.6",
    "C-4.1.7",
    "C-4.1.8",
    "C-4.1.9",
    "C-4.2.1.1",
    "C-4.2.1.2",
    "C-4.2.1.3",
    "C-4.2.1.4",
    "C-4.2.1.5",
    "C-4.2.1.6",
    "C-4.2.2.1",
    "C-4.2.2.2",
    "C-4.2.2.3",
    "C-4.2.3",
    "C-4.3",
    "C-5.1.1",
    "C-5.1.2",
    "C-5.1.3",
    "C-5.1.4",
    "C-5.1.5",
    "C-5.1.6",
    "C-5.1.7",
    "C-5.1.8",
    "C-5.2.1",
    "C-5.2.10",
    "C-5.2.11",
    "C-5.2.12",
    "C-5.2.13",
    "C-5.2.14",
    "C-5.2.15",
    "C-5.2.16",
    "C-5.2.17",
    "C-5.2.18",
    "C-5.2.19",
    "C-5.2.2",
    "C-5.2.20",
    "C-5.2.21",
    "C-5.2.22",
    "C-5.2.23",
    "C-5.2.3",
    "C-5.2.4",
    "C-5.2.5",
    "C-5.2.6",
    "C-5.2.7",
    "C-5.2.8",
    "C-5.2.9",
    "C-5.3.1",
    "C-5.3.2",
    "C-5.3.3",
    "C-5.3.4",
    "C-5.4.1.1",
    "C-5.4.1.2",
    "C-5.4.1.3",
    "C-5.4.1.4",
    "C-5.4.1.5",
    "C-5.4.2",
    "C-5.4.3",
    "C-5.4.4",
    "C-5.4.5",
    "C-5.5",
    "C-5.6",
    "C-6.1.1",
    "C-6.1.10",
    "C-6.1.11",
    "C-6.1.12",
    "C-6.1.13",
    "C-6.1.14",
    "C-6.1.2",
    "C-6.1.3",
    "C-6.1.4",
    "C-6.1.5",
    "C-6.1.6",
    "C-6.1.7",
    "C-6.1.8",
    "C-6.1.9",
    "C-6.2.1",
    "C-6.2.10",
    "C-6.2.11",
    "C-6.2.12",
    "C-6.2.13",
    "C-6.2.14",
    "C-6.2.15",
    "C-6.2.16",
    "C-6.2.17",
    "C-6.2.18",
    "C-6.2.19",
    "C-6.2.2",
    "C-6.2.20",
    "C-6.2.3",
    "C-6.2.4",
    "C-6.2.5",
    "C-6.2.6",
    "C-6.2.7",
    "C-6.2.8",
    "C-6.2.9"
  ],
  "changedControls": {
    "account_expiration": {
      "tags": {
        "severity": "medium",
        "gid": "account_expiration",
        "rid": "account_disable_post_pw_expiration",
        "gtitle": "Set Account Expiration Parameters",
        "fix_id": "account_disable_post_pw_expiration"
      },
      "id": "account_expiration",
      "title": [
        {
          "#text": "Set Account Expiration Following Inactivity",
          "@_lang": "en-US"
        }
      ],
      "desc": "To specify the number of days after a password expires (which signifies inactivity) until an account is permanently disabled, add or correct the following line in:If a password is currently on the verge of expiration, thenday(s) remain(s) until the account is automatically disabled. However, if the password will not expire for another 60 days, then 60 days plusday(s) could elapse until the account would be automatically disabled. See theman page for more information.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'login' 2&gt;/dev/null | grep -q installed; then var_account_disable_post_pw_expiration='' # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/default/useradd\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^INACTIVE\") # shellcheck disable=SC2059 printf -v formatted_output \"%s=%s\" \"$stripped_key\" \"$var_account_disable_post_pw_expiration\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^INACTIVE\\\\&gt;\" \"/etc/default/useradd\"; then \"${sed_command[@]}\" \"s/^INACTIVE\\\\&gt;.*/$formatted_output/gi\" \"/etc/default/useradd\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/default/useradd\" &gt;&gt; \"/etc/default/useradd\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/default/useradd\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "accounts-banners": {
      "tags": {
        "severity": "medium",
        "gid": "accounts-banners",
        "rid": "banner_etc_issue_net",
        "gtitle": "Warning Banners for System Accesses",
        "fix_id": "banner_etc_issue_net"
      },
      "id": "accounts-banners",
      "title": [
        {
          "#text": "Modify the System Login Banner",
          "@_lang": "en-US"
        }
      ],
      "desc": "To configure the system login banner edit. Replace the default text with a message compliant with the local site policy or a legal disclaimer. The DoD required text is either:OR:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then login_banner_text='' # Multiple regexes transform the banner regex into a usable banner # 0 - Remove anchors around the banner text login_banner_text=$(echo \"$login_banner_text\" | sed 's/^\\^\\(.*\\)\\$$/\\1/g') # 1 - Keep only the first banners if there are multiple # (dod_banners contains the long and short banner) login_banner_text=$(echo \"$login_banner_text\" | sed 's/^(\\(.*\\)|.*)$/\\1/g') # 2 - Add spaces ' '. (Transforms regex for \"space or newline\" into a \" \") login_banner_text=$(echo \"$login_banner_text\" | sed 's/\\[\\\\s\\ \\]+/ /g') # 3 - Adds newlines. (Transforms \"(?:\\[\\ \\]+|(?:\\ )+)\" into \" \") login_banner_text=$(echo \"$login_banner_text\" | sed 's/(?:\\[\\ \\]+|(?:\\\\\\ )+)/ /g') # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example). login_banner_text=$(echo \"$login_banner_text\" | sed 's/\\\\//g') formatted=$(echo \"$login_banner_text\" | fold -sw 80) cat &lt;&lt;EOF &gt;/etc/issue.net $formatted EOF else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "accounts-pam": {
      "tags": {
        "severity": "medium",
        "gid": "accounts-pam",
        "rid": "package_pam_pwquality_installed",
        "gtitle": "Protect Accounts by Configuring PAM",
        "fix_id": "package_pam_pwquality_installed"
      },
      "id": "accounts-pam",
      "title": [
        {
          "#text": "Install pam_pwquality Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "DEBIAN_FRONTEND=noninteractive apt-get install -y \"libpam-pwquality\""
      }
    },
    "accounts-physical": {
      "tags": {
        "severity": "high",
        "gid": "accounts-physical",
        "rid": "disable_ctrlaltdel_burstaction",
        "gtitle": "Protect Physical Console Access",
        "fix_id": "disable_ctrlaltdel_burstaction"
      },
      "id": "accounts-physical",
      "title": [
        {
          "#text": "Disable Ctrl-Alt-Del Burst Action",
          "@_lang": "en-US"
        }
      ],
      "desc": "By default,will reboot the system if thekey sequence is pressed Ctrl-Alt-Delete more than 7 times in 2 seconds.To configure the system to ignore thesetting, add or modify the following to:",
      "impact": 0.7,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'systemd' 2&gt;/dev/null | grep -q installed; then # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/systemd/system.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^CtrlAltDelBurstAction=\") # shellcheck disable=SC2059 printf -v formatted_output \"%s=%s\" \"$stripped_key\" \"none\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^CtrlAltDelBurstAction=\\\\&gt;\" \"/etc/systemd/system.conf\"; then \"${sed_command[@]}\" \"s/^CtrlAltDelBurstAction=\\\\&gt;.*/$formatted_output/gi\" \"/etc/systemd/system.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/systemd/system.conf\" &gt;&gt; \"/etc/systemd/system.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/systemd/system.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "accounts-session": {
      "tags": {
        "severity": "medium",
        "gid": "accounts-session",
        "rid": "accounts_logon_fail_delay",
        "gtitle": "Secure Session Configuration Files for Login Accounts"
      },
      "id": "accounts-session",
      "title": [
        {
          "#text": "Ensure the Logon Failure Delay is Set Correctly in login.defs",
          "@_lang": "en-US"
        }
      ],
      "desc": "To ensure the logon failure delay controlled byis set properly, add or correct thesetting into read as follows:",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "aide": {
      "tags": {
        "severity": "medium",
        "gid": "aide",
        "rid": "package_aide_installed",
        "gtitle": "Verify Integrity with AIDE",
        "fix_id": "package_aide_installed"
      },
      "id": "aide",
      "title": [
        {
          "#text": "Install AIDE",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"aide\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "apparmor": {
      "tags": {
        "severity": "medium",
        "gid": "apparmor",
        "rid": "package_apparmor_installed",
        "gtitle": "AppArmor",
        "fix_id": "package_apparmor_installed"
      },
      "id": "apparmor",
      "title": [
        {
          "#text": "Ensure AppArmor is installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "AppArmor provide Mandatory Access Controls.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"apparmor\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "apport": {
      "tags": {
        "severity": "critical",
        "gid": "apport",
        "rid": "service_apport_disabled",
        "gtitle": "Apport Service",
        "fix_id": "service_apport_disabled"
      },
      "id": "apport",
      "title": [
        {
          "#text": "Disable Apport Service",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Apport modifies certain kernel configuration values at runtime which may decrease the overall security of the system and expose sensitive data. Theservice can be disabled with the following command:",
      "impact": 1,
      "descs": {
        "fix": "SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" stop 'apport.service' \"$SYSTEMCTL_EXEC\" disable 'apport.service' \"$SYSTEMCTL_EXEC\" mask 'apport.service' # Disable socket activation if we have a unit file for it if \"$SYSTEMCTL_EXEC\" list-unit-files | grep -q '^apport.socket'; then \"$SYSTEMCTL_EXEC\" stop 'apport.socket' \"$SYSTEMCTL_EXEC\" mask 'apport.socket' fi # The service may not be running because it has been started and failed, # so let's reset the state so OVAL checks pass. # Service should be 'inactive', not 'failed' after reboot though. \"$SYSTEMCTL_EXEC\" reset-failed 'apport.service' || true"
      }
    },
    "apt": {
      "tags": {
        "severity": "critical",
        "gid": "apt",
        "rid": "apt_conf_disallow_unauthenticated",
        "gtitle": "APT service configuration",
        "fix_id": "apt_conf_disallow_unauthenticated"
      },
      "id": "apt",
      "title": [
        {
          "#text": "Disable unauthenticated repositories in APT configuration",
          "@_lang": "en-US"
        }
      ],
      "desc": "Unauthenticated repositories should not be used for updates.",
      "impact": 1,
      "descs": {
        "fix": "for file in /etc/apt/apt.conf.d/*; do if [ -e \"$file\" ]; then if grep -qi \"APT::Get::AllowUnauthenticated\" $file; then sed -i --follow-symlinks \"s/^.*APT::Get::AllowUnauthenticated.*/APT::Get::AllowUnauthenticated \\\"false\\\";/I\" $file fi fi done"
      }
    },
    "audit_dac_actions": {
      "tags": {
        "severity": "medium",
        "gid": "audit_dac_actions",
        "rid": "audit_rules_dac_modification_chmod",
        "gtitle": "Record Events that Modify the System's Discretionary Access Controls",
        "fix_id": "audit_rules_dac_modification_chmod"
      },
      "id": "audit_dac_actions",
      "title": [
        {
          "#text": "Record Events that Modify the System's Discretionary Access Controls - chmod",
          "@_lang": "en-US"
        }
      ],
      "desc": "At a minimum, the audit system should collect file permission changes for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following line to a file with suffixin the directory:If the system is 64 bit then also add the following line:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following line tofile:If the system is 64 bit then also add the following line:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # First perform the remediation of the syscall rule # Retrieve hardware architecture of the underlying system [ \"$(getconf LONG_BIT)\" = \"32\" ] &amp;&amp; RULE_ARCHS=(\"b32\") || RULE_ARCHS=(\"b32\" \"b64\") for ARCH in \"${RULE_ARCHS[@]}\" do  ACTION_ARCH_FILTERS=\"-a always,exit -F arch=$ARCH\"  OTHER_FILTERS=\"\"  AUID_FILTERS=\"-F auid&gt;=1000 -F auid!=unset\"  SYSCALL=\"chmod\"  KEY=\"perm_mod\"  SYSCALL_GROUPING=\"chmod fchmod fchmodat\"  # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\"  fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_execution_acl_commands": {
      "tags": {
        "severity": "medium",
        "gid": "audit_execution_acl_commands",
        "rid": "audit_rules_execution_chacl",
        "gtitle": "Record Execution Attempts to Run ACL Privileged Commands",
        "fix_id": "audit_rules_execution_chacl"
      },
      "id": "audit_execution_acl_commands",
      "title": [
        {
          "#text": "Record Any Attempts to Run chacl",
          "@_lang": "en-US"
        }
      ],
      "desc": "At a minimum, the audit system should collect any execution attempt of thecommand for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following lines to a file with suffixin the directory:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following lines tofile:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then ACTION_ARCH_FILTERS=\"-a always,exit\" OTHER_FILTERS=\"-F path=/usr/bin/chacl -F perm=x\" AUID_FILTERS=\"-F auid&gt;=1000 -F auid!=unset\" SYSCALL=\"\" KEY=\"privileged\" SYSCALL_GROUPING=\"\" # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_execution_selinux_commands": {
      "tags": {
        "severity": "medium",
        "gid": "audit_execution_selinux_commands",
        "rid": "audit_rules_execution_chcon",
        "gtitle": "Record Execution Attempts to Run SELinux Privileged Commands",
        "fix_id": "audit_rules_execution_chcon"
      },
      "id": "audit_execution_selinux_commands",
      "title": [
        {
          "#text": "Record Any Attempts to Run chcon",
          "@_lang": "en-US"
        }
      ],
      "desc": "At a minimum, the audit system should collect any execution attempt of thecommand for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following lines to a file with suffixin the directory:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following lines tofile:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then ACTION_ARCH_FILTERS=\"-a always,exit\" OTHER_FILTERS=\"-F path=/usr/bin/chcon -F perm=x\" AUID_FILTERS=\"-F auid&gt;=1000 -F auid!=unset\" SYSCALL=\"\" KEY=\"privileged\" SYSCALL_GROUPING=\"\" # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_file_deletion_events": {
      "tags": {
        "severity": "medium",
        "gid": "audit_file_deletion_events",
        "rid": "audit_rules_file_deletion_events_rename",
        "gtitle": "Record File Deletion Events by User",
        "fix_id": "audit_rules_file_deletion_events_rename"
      },
      "id": "audit_file_deletion_events",
      "title": [
        {
          "#text": "Ensure auditd Collects File Deletion Events by User - rename",
          "@_lang": "en-US"
        }
      ],
      "desc": "At a minimum, the audit system should collect file deletion events for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following line to a file with suffixin the directory, setting ARCH to either b32 or b64 as appropriate for your system:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following line tofile, setting ARCH to either b32 or b64 as appropriate for your system:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # First perform the remediation of the syscall rule # Retrieve hardware architecture of the underlying system [ \"$(getconf LONG_BIT)\" = \"32\" ] &amp;&amp; RULE_ARCHS=(\"b32\") || RULE_ARCHS=(\"b32\" \"b64\") for ARCH in \"${RULE_ARCHS[@]}\" do  ACTION_ARCH_FILTERS=\"-a always,exit -F arch=$ARCH\"  OTHER_FILTERS=\"\"  AUID_FILTERS=\"-F auid&gt;=1000 -F auid!=unset\"  SYSCALL=\"rename\"  KEY=\"delete\"  SYSCALL_GROUPING=\"unlink unlinkat rename renameat rmdir\"  # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\"  fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_file_modification": {
      "tags": {
        "severity": "medium",
        "gid": "audit_file_modification",
        "rid": "audit_rules_unsuccessful_file_modification_creat",
        "gtitle": "Record Unauthorized Access Attempts Events to Files (unsuccessful)",
        "fix_id": "audit_rules_unsuccessful_file_modification_creat"
      },
      "id": "audit_file_modification",
      "title": [
        {
          "#text": "Record Unsuccessful Access Attempts to Files - creat",
          "@_lang": "en-US"
        }
      ],
      "desc": "At a minimum, the audit system should collect unauthorized file accesses for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following lines to a file with suffixin the directory:If the system is 64 bit then also add the following lines:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following lines tofile:If the system is 64 bit then also add the following lines:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # First perform the remediation of the syscall rule # Retrieve hardware architecture of the underlying system [ \"$(getconf LONG_BIT)\" = \"32\" ] &amp;&amp; RULE_ARCHS=(\"b32\") || RULE_ARCHS=(\"b32\" \"b64\") AUID_FILTERS=\"-F auid&gt;=1000 -F auid!=unset\" SYSCALL=\"creat\" KEY=\"access\" SYSCALL_GROUPING=\"creat ftruncate truncate open openat open_by_handle_at\" for ARCH in \"${RULE_ARCHS[@]}\" do  ACTION_ARCH_FILTERS=\"-a always,exit -F arch=$ARCH\"  OTHER_FILTERS=\"-F exit=-EACCES\"  # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\"  fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" done for ARCH in \"${RULE_ARCHS[@]}\" do  ACTION_ARCH_FILTERS=\"-a always,exit -F arch=$ARCH\"  OTHER_FILTERS=\"-F exit=-EPERM\"  # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\"  fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_kernel_module_loading": {
      "tags": {
        "severity": "medium",
        "gid": "audit_kernel_module_loading",
        "rid": "audit_rules_kernel_module_loading_delete",
        "gtitle": "Record Information on Kernel Modules Loading and Unloading",
        "fix_id": "audit_rules_kernel_module_loading_delete"
      },
      "id": "audit_kernel_module_loading",
      "title": [
        {
          "#text": "Ensure auditd Collects Information on Kernel Module Unloading - delete_module",
          "@_lang": "en-US"
        }
      ],
      "desc": "To capture kernel module unloading events, use following line, setting ARCH to either b32 for 32-bit system, or having two lines for both b32 and b64 in case your system is 64-bit:Place to add the line depends on a waydaemon is configured. If it is configured to use theprogram (the default), add the line to a file with suffixin the directory. If thedaemon is configured to use theutility, add the line to file.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # First perform the remediation of the syscall rule # Retrieve hardware architecture of the underlying system # Note: 32-bit and 64-bit kernel syscall numbers not always line up =&gt; # it's required on a 64-bit system to check also for the presence # of 32-bit's equivalent of the corresponding rule. # (See `man 7 audit.rules` for details ) [ \"$(getconf LONG_BIT)\" = \"32\" ] &amp;&amp; RULE_ARCHS=(\"b32\") || RULE_ARCHS=(\"b32\" \"b64\") for ARCH in \"${RULE_ARCHS[@]}\" do  ACTION_ARCH_FILTERS=\"-a always,exit -F arch=$ARCH\"  OTHER_FILTERS=\"\"  AUID_FILTERS=\"\"  SYSCALL=\"delete_module\"  KEY=\"modules\"  SYSCALL_GROUPING=\"delete_module\"  # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_syscall_rule \"augenrules\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\"  fix_audit_syscall_rule \"auditctl\" \"$ACTION_ARCH_FILTERS\" \"$OTHER_FILTERS\" \"$AUID_FILTERS\" \"$SYSCALL\" \"$SYSCALL_GROUPING\" \"$KEY\" done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_login_events": {
      "tags": {
        "severity": "medium",
        "gid": "audit_login_events",
        "rid": "audit_rules_login_events_faillog",
        "gtitle": "Record Attempts to Alter Logon and Logout Events",
        "fix_id": "audit_rules_login_events_faillog"
      },
      "id": "audit_login_events",
      "title": [
        {
          "#text": "Record Attempts to Alter Logon and Logout Events - faillog",
          "@_lang": "en-US"
        }
      ],
      "desc": "The audit system already collects login information for all users and root. If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following lines to a file with suffixin the directoryin order to watch for attempted manual edits of files involved in storing logon events:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following lines tofile in order to watch for unattempted manual edits of files involved in storing logon events:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # Perform the remediation for both possible tools: 'auditctl' and 'augenrules'fix_audit_watch_rule \"auditctl\" \"/var/log/faillog\" \"wa\" \"logins\" fix_audit_watch_rule \"augenrules\" \"/var/log/faillog\" \"wa\" \"logins\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "audit_privileged_commands": {
      "tags": {
        "severity": "medium",
        "gid": "audit_privileged_commands",
        "rid": "audit_rules_privileged_commands",
        "gtitle": "Record Information on the Use of Privileged Commands"
      },
      "id": "audit_privileged_commands",
      "title": [
        {
          "#text": "Ensure auditd Collects Information on the Use of Privileged Commands",
          "@_lang": "en-US"
        }
      ],
      "desc": "The audit system should collect information about usage of privileged commands for all users and root. To find the relevant setuid / setgid programs, run the following command for each local partition:If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add a line of the following form to a file with suffixin the directoryfor each setuid / setgid program on the system, replacing thepart with the full path of that setuid / setgid program in the list:If thedaemon is configured to use theutility to read audit rules during daemon startup, add a line of the following form tofor each setuid / setgid program on the system, replacing thepart with the full path of that setuid / setgid program in the list:",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "audit_time_rules": {
      "tags": {
        "severity": "medium",
        "gid": "audit_time_rules",
        "rid": "audit_rules_time_adjtimex",
        "gtitle": "Records Events that Modify Date and Time Information",
        "fix_id": "audit_rules_time_adjtimex"
      },
      "id": "audit_time_rules",
      "title": [
        {
          "#text": "Record attempts to alter time through adjtimex",
          "@_lang": "en-US"
        }
      ],
      "desc": "If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following line to a file with suffixin the directory:If the system is 64 bit then also add the following line:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following line tofile:If the system is 64 bit then also add the following line:The -k option allows for the specification of a key in string form that can be used for better reporting capability through ausearch and aureport. Multiple system calls can be defined on the same line to save space if desired, but is not required. See an example of multiple combined syscalls:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; thenperform_audit_adjtimex_settimeofday_stime_remediation else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "auditd_configure_rules": {
      "tags": {
        "severity": "medium",
        "gid": "auditd_configure_rules",
        "rid": "audit_rules_immutable",
        "gtitle": "Configure auditd Rules for Comprehensive Auditing",
        "fix_id": "audit_rules_immutable"
      },
      "id": "auditd_configure_rules",
      "title": [
        {
          "#text": "Make the auditd Configuration Immutable",
          "@_lang": "en-US"
        }
      ],
      "desc": "If thedaemon is configured to use theprogram to read audit rules during daemon startup (the default), add the following line to a file with suffixin the directoryin order to make the auditd configuration immutable:If thedaemon is configured to use theutility to read audit rules during daemon startup, add the following line tofile in order to make the auditd configuration immutable:With this setting, a reboot will be required to change any audit rules.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # Traverse all of: # # /etc/audit/audit.rules,   (for auditctl case) # /etc/audit/rules.d/*.rules   (for augenrules case) # # files to check if '-e .*' setting is present in that '*.rules' file already. # If found, delete such occurrence since auditctl(8) manual page instructs the # '-e 2' rule should be placed as the last rule in the configuration find /etc/audit /etc/audit/rules.d -maxdepth 1 -type f -name '*.rules' -exec sed -i '/-e[[:space:]]\\+.*/d' {} ';' # Append '-e 2' requirement at the end of both: # * /etc/audit/audit.rules file   (for auditctl case) # * /etc/audit/rules.d/immutable.rules  (for augenrules case) for AUDIT_FILE in \"/etc/audit/audit.rules\" \"/etc/audit/rules.d/immutable.rules\" do  echo '' &gt;&gt; $AUDIT_FILE  echo '# Set the audit.rules configuration immutable per security requirements' &gt;&gt; $AUDIT_FILE  echo '# Reboot is required to change audit rules once this setting is applied' &gt;&gt; $AUDIT_FILE  echo '-e 2' &gt;&gt; $AUDIT_FILE  chmod o-rwx $AUDIT_FILE done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "auditing": {
      "tags": {
        "severity": "medium",
        "gid": "auditing",
        "rid": "package_audit-audispd-plugins_installed",
        "gtitle": "System Accounting with auditd",
        "fix_id": "package_audit-audispd-plugins_installed"
      },
      "id": "auditing",
      "title": [
        {
          "#text": "Ensure the default plugins for the audit dispatcher are Installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "The audit-audispd-plugins package should be installed.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"audispd-plugins\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "avahi_configuration": {
      "tags": {
        "severity": "low",
        "gid": "avahi_configuration",
        "rid": "avahi_disable_publishing",
        "gtitle": "Configure Avahi if Necessary"
      },
      "id": "avahi_configuration",
      "title": [
        {
          "#text": "Disable Avahi Publishing",
          "@_lang": "en-US"
        }
      ],
      "desc": "To prevent Avahi from publishing its records, editand ensure the following line appears in thesection:",
      "impact": 0.3,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "base": {
      "tags": {
        "severity": "medium",
        "gid": "base",
        "rid": "service_kdump_disabled",
        "gtitle": "Base Services",
        "fix_id": "service_kdump_disabled"
      },
      "id": "base",
      "title": [
        {
          "#text": "Disable KDump Kernel Crash Analyzer (kdump)",
          "@_lang": "en-US"
        }
      ],
      "desc": "Theservice provides a kernel crash dump analyzer. It uses thesystem call to boot a secondary kernel (\"capture\" kernel) following a system crash, which can load information from the crashed kernel for analysis. Theservice can be disabled with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" stop 'kdump.service' \"$SYSTEMCTL_EXEC\" disable 'kdump.service' \"$SYSTEMCTL_EXEC\" mask 'kdump.service' # Disable socket activation if we have a unit file for it if \"$SYSTEMCTL_EXEC\" list-unit-files | grep -q '^kdump.socket'; then \"$SYSTEMCTL_EXEC\" stop 'kdump.socket' \"$SYSTEMCTL_EXEC\" mask 'kdump.socket' fi # The service may not be running because it has been started and failed, # so let's reset the state so OVAL checks pass. # Service should be 'inactive', not 'failed' after reboot though. \"$SYSTEMCTL_EXEC\" reset-failed 'kdump.service' || true else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "bootloader-grub2": {
      "tags": {
        "severity": "critical",
        "gid": "bootloader-grub2",
        "rid": "grub2_enable_iommu_force",
        "gtitle": "GRUB2 bootloader configuration",
        "fix_id": "grub2_enable_iommu_force"
      },
      "id": "bootloader-grub2",
      "title": [
        {
          "#text": "IOMMU configuration directive",
          "@_lang": "en-US"
        }
      ],
      "desc": "On x86 architecture supporting VT-d, the IOMMU manages the access control policy between the hardware devices and some of the system critical units such as the memory.",
      "impact": 1,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'grub2-common' 2&gt;/dev/null | grep -q installed &amp;&amp; { [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; }; then # Correct the form of default kernel command line in GRUB if grep -q '^GRUB_CMDLINE_LINUX=.*iommu=.*\"' '/etc/default/grub' ; then  # modify the GRUB command-line if an iommu= arg already exists  sed -i 's/\\(^GRUB_CMDLINE_LINUX=\".*\\)iommu=[^[:space:]]*\\(.*\"\\)/\\1 iommu=force \\2/' '/etc/default/grub' else  # no iommu=arg is present, append it  sed -i 's/\\(^GRUB_CMDLINE_LINUX=\".*\\)\"/\\1 iommu=force\"/' '/etc/default/grub' fi update-grub else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "bootloader-zipl": {
      "tags": {
        "severity": "medium",
        "gid": "bootloader-zipl",
        "rid": "zipl_audit_argument",
        "gtitle": "zIPL bootloader configuration"
      },
      "id": "bootloader-zipl",
      "title": [
        {
          "#text": "Enable Auditing to Start Prior to the Audit Daemon in zIPL",
          "@_lang": "en-US"
        }
      ],
      "desc": "To ensure all processes can be audited, even those which start prior to the audit daemon, check that all boot entries inhaveincluded in its options.To ensure that new kernels and boot entries continue to enable audit, addto.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "certified-vendor": {
      "tags": {
        "severity": "high",
        "gid": "certified-vendor",
        "rid": "installed_OS_is_FIPS_certified",
        "gtitle": "Operating System Vendor Support and Certification"
      },
      "id": "certified-vendor",
      "title": [
        {
          "#text": "The Installed Operating System Is FIPS 140-2 Certified",
          "@_lang": "en-US"
        }
      ],
      "desc": "To enable processing of sensitive information the operating system must provide certified cryptographic modules compliant with FIPS 140-2 standard. Ubuntu Linux is supported by Canonical Ltd. As the Ubuntu Linux Vendor, Canonical Ltd. is responsible for government certifications and standards. Users of Ubuntu Linux either need an Ubuntu Advantage subscription or need to be using Ubuntu Pro from a sponsored vendor in order to have access to FIPS content supported by Canonical.",
      "impact": 0.7,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "configure_auditd_data_retention": {
      "tags": {
        "severity": "medium",
        "gid": "configure_auditd_data_retention",
        "rid": "auditd_audispd_configure_remote_server",
        "gtitle": "Configure auditd Data Retention",
        "fix_id": "auditd_audispd_configure_remote_server"
      },
      "id": "configure_auditd_data_retention",
      "title": [
        {
          "#text": "Configure audispd Plugin To Send Logs To Remote Server",
          "@_lang": "en-US"
        }
      ],
      "desc": "Configure the audispd plugin to off-load audit records onto a different system or media from the system being audited. First, set theoption inSet theoption inwith an IP address or hostname of the system that the audispd plugin should send audit records to. For example",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then var_audispd_remote_server='' AUDITCONFIG=/etc/audisp/audisp-remote.conf AUREMOTECONFIG=/etc/audisp/plugins.d/au-remote.conf # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"$AUREMOTECONFIG\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^active\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"yes\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^active\\\\&gt;\" \"$AUREMOTECONFIG\"; then \"${sed_command[@]}\" \"s/^active\\\\&gt;.*/$formatted_output/gi\" \"$AUREMOTECONFIG\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"$AUREMOTECONFIG\" &gt;&gt; \"$AUREMOTECONFIG\" printf '%s ' \"$formatted_output\" &gt;&gt; \"$AUREMOTECONFIG\" fi # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"$AUDITCONFIG\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^remote_server\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"$var_audispd_remote_server\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^remote_server\\\\&gt;\" \"$AUDITCONFIG\"; then \"${sed_command[@]}\" \"s/^remote_server\\\\&gt;.*/$formatted_output/gi\" \"$AUDITCONFIG\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"$AUDITCONFIG\" &gt;&gt; \"$AUDITCONFIG\" printf '%s ' \"$formatted_output\" &gt;&gt; \"$AUDITCONFIG\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "configuring_ipv6": {
      "tags": {
        "severity": "medium",
        "gid": "configuring_ipv6",
        "rid": "sysctl_net_ipv6_conf_all_accept_ra",
        "gtitle": "Configure IPv6 Settings if Necessary",
        "fix_id": "sysctl_net_ipv6_conf_all_accept_ra"
      },
      "id": "configuring_ipv6",
      "title": [
        {
          "#text": "Configure Accepting Router Advertisements on All IPv6 Interfaces",
          "@_lang": "en-US"
        }
      ],
      "desc": "To set the runtime status of thekernel parameter, run the following command:To make sure that the setting is persistent, add the following line to a file in the directory:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then sysctl_net_ipv6_conf_all_accept_ra_value='' # # Set runtime for net.ipv6.conf.all.accept_ra # /sbin/sysctl -q -n -w net.ipv6.conf.all.accept_ra=\"$sysctl_net_ipv6_conf_all_accept_ra_value\" # # If net.ipv6.conf.all.accept_ra present in /etc/sysctl.conf, change value to appropriate value # else, add \"net.ipv6.conf.all.accept_ra = value\" to /etc/sysctl.conf # # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/sysctl.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^net.ipv6.conf.all.accept_ra\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"$sysctl_net_ipv6_conf_all_accept_ra_value\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^net.ipv6.conf.all.accept_ra\\\\&gt;\" \"/etc/sysctl.conf\"; then \"${sed_command[@]}\" \"s/^net.ipv6.conf.all.accept_ra\\\\&gt;.*/$formatted_output/gi\" \"/etc/sysctl.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/sysctl.conf\" &gt;&gt; \"/etc/sysctl.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/sysctl.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "console_screen_locking": {
      "tags": {
        "severity": "medium",
        "gid": "console_screen_locking",
        "rid": "vlock_installed",
        "gtitle": "Configure Console Screen Locking",
        "fix_id": "vlock_installed"
      },
      "id": "console_screen_locking",
      "title": [
        {
          "#text": "Check that vlock is installed to allow session locking",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Ubuntu 20.04 operating system must have vlock installed to allow for session locking. Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "DEBIAN_FRONTEND=noninteractive apt-get install -y \"vlock\""
      }
    },
    "coredumps": {
      "tags": {
        "severity": "medium",
        "gid": "coredumps",
        "rid": "coredump_disable_backtraces",
        "gtitle": "Disable Core Dumps",
        "fix_id": "coredump_disable_backtraces"
      },
      "id": "coredumps",
      "title": [
        {
          "#text": "Disable core dump backtraces",
          "@_lang": "en-US"
        }
      ],
      "desc": "Theoption insection ofspecifies the maximum size in bytes of a core which will be processed. Core dumps exceeding this size may be stored, but the backtrace will not be generated.",
      "impact": 0.5,
      "descs": {
        "fix": "if [ -e \"/etc/systemd/coredump.conf\" ] ; then LC_ALL=C sed -i \"/^\\s*ProcessSizeMax\\s*=\\s*/Id\" \"/etc/systemd/coredump.conf\" else touch \"/etc/systemd/coredump.conf\" fi cp \"/etc/systemd/coredump.conf\" \"/etc/systemd/coredump.conf.bak\" # Insert at the end of the file printf '%s ' \"ProcessSizeMax=0\" &gt;&gt; \"/etc/systemd/coredump.conf\" # Clean up after ourselves. rm \"/etc/systemd/coredump.conf.bak\""
      }
    },
    "cron_and_at": {
      "tags": {
        "severity": "medium",
        "gid": "cron_and_at",
        "rid": "package_cron_installed",
        "gtitle": "Cron and At Daemons",
        "fix_id": "package_cron_installed"
      },
      "id": "cron_and_at",
      "title": [
        {
          "#text": "Install the cron service",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Cron service should be installed.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"cron\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "crypto": {
      "tags": {
        "severity": "high",
        "gid": "crypto",
        "rid": "configure_crypto_policy",
        "gtitle": "System Cryptographic Policies",
        "fix_id": "configure_crypto_policy"
      },
      "id": "crypto",
      "title": [
        {
          "#text": "Configure System Cryptography Policy",
          "@_lang": "en-US"
        }
      ],
      "desc": "To configure the system cryptography policy to use ciphers only from thepolicy, run the following command:The rule checks if settings for selected crypto policy are configured as expected. Configuration files in theare either symlinks to correct files provided by Crypto-policies package or they are regular files in case crypto policy customizations are applied. Crypto policies may be customized by crypto policy modules, in which case it is delimited from the base policy using a colon.",
      "impact": 0.7,
      "descs": {
        "fix": "# include remediation functions library var_system_crypto_policy='' stderr_of_call=$(update-crypto-policies --set ${var_system_crypto_policy} 2&gt;&amp;1 &gt; /dev/null) rc=$? if test \"$rc\" = 127; then  echo \"$stderr_of_call\" &gt;&amp;2  echo \"Make sure that the script is installed on the remediated system.\" &gt;&amp;2  echo \"See output of the 'dnf provides update-crypto-policies' command\" &gt;&amp;2  echo \"to see what package to (re)install\" &gt;&amp;2  false # end with an error code elif test \"$rc\" != 0; then  echo \"Error invoking the update-crypto-policies script: $stderr_of_call\" &gt;&amp;2  false # end with an error code fi"
      }
    },
    "deprecated": {
      "tags": {
        "severity": "high",
        "gid": "deprecated",
        "rid": "package_inetutils-telnetd_removed",
        "gtitle": "Deprecated services",
        "fix_id": "package_inetutils-telnetd_removed"
      },
      "id": "deprecated",
      "title": [
        {
          "#text": "Uninstall the inet-based telnet server",
          "@_lang": "en-US"
        }
      ],
      "desc": "The inet-based telnet daemon should be uninstalled.",
      "impact": 0.7,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove inetutils-telnetd #  from the system, and may remove any packages #  that depend on inetutils-telnetd. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"inetutils-telnetd\""
      }
    },
    "dhcp_client_configuration": {
      "tags": {
        "severity": "critical",
        "gid": "dhcp_client_configuration",
        "rid": "dhcp_client_restrict_options",
        "gtitle": "Configure DHCP Client if Necessary"
      },
      "id": "dhcp_client_configuration",
      "title": [
        {
          "#text": "Minimize the DHCP-Configured Options",
          "@_lang": "en-US"
        }
      ],
      "desc": "Create the file, and add an appropriate setting for each of the ten configuration settings which can be obtained via DHCP. For each setting, do one of the following:If the setting shouldbe configured remotely by the DHCP server, select an appropriate static value, and add the line:If the setting should be configured remotely by the DHCP server, add the lines:For example, suppose the DHCP server should provide only the IP address itself and the subnet mask. Then the entire file should look like:",
      "impact": 1,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "dhcp_server_configuration": {
      "tags": {
        "severity": "critical",
        "gid": "dhcp_server_configuration",
        "rid": "dhcp_server_minimize_served_info",
        "gtitle": "Configure DHCP Server"
      },
      "id": "dhcp_server_configuration",
      "title": [
        {
          "#text": "Minimize Served Information",
          "@_lang": "en-US"
        }
      ],
      "desc": "Edit /etc/dhcp/dhcpd.conf. Examine each address range section within the file, and ensure that the following options are not defined unless there is an operational need to provide this information via DHCP:",
      "impact": 1,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "disable_avahi_group": {
      "tags": {
        "severity": "low",
        "gid": "disable_avahi_group",
        "rid": "package_avahi-daemon_removed",
        "gtitle": "Disable Avahi Server if Possible",
        "fix_id": "package_avahi-daemon_removed"
      },
      "id": "disable_avahi_group",
      "title": [
        {
          "#text": "Uninstall avahi-daemon Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove avahi-daemon #  from the system, and may remove any packages #  that depend on avahi-daemon. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"avahi-daemon\""
      }
    },
    "disabling_dhcp_server": {
      "tags": {
        "severity": "medium",
        "gid": "disabling_dhcp_server",
        "rid": "package_dhcp_removed",
        "gtitle": "Disable DHCP Server",
        "fix_id": "package_dhcp_removed"
      },
      "id": "disabling_dhcp_server",
      "title": [
        {
          "#text": "Uninstall DHCP Server Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "If the system does not need to act as a DHCP server, the dhcp package can be uninstalled. Thepackage can be removed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove isc-dhcp-server #  from the system, and may remove any packages #  that depend on isc-dhcp-server. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"isc-dhcp-server\""
      }
    },
    "disabling_dns_server": {
      "tags": {
        "severity": "low",
        "gid": "disabling_dns_server",
        "rid": "package_bind_removed",
        "gtitle": "Disable DNS Server",
        "fix_id": "package_bind_removed"
      },
      "id": "disabling_dns_server",
      "title": [
        {
          "#text": "Uninstall bind Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Theservice is provided by thepackage. Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove bind9 #  from the system, and may remove any packages #  that depend on bind9. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"bind9\""
      }
    },
    "disabling_dovecot": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_dovecot",
        "rid": "package_dovecot_removed",
        "gtitle": "Disable Dovecot",
        "fix_id": "package_dovecot_removed"
      },
      "id": "disabling_dovecot",
      "title": [
        {
          "#text": "Uninstall dovecot Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove dovecot-core #  from the system, and may remove any packages #  that depend on dovecot-core. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"dovecot-core\""
      }
    },
    "disabling_httpd": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_httpd",
        "rid": "package_httpd_removed",
        "gtitle": "Disable Apache if Possible",
        "fix_id": "package_httpd_removed"
      },
      "id": "disabling_httpd",
      "title": [
        {
          "#text": "Uninstall httpd Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove apache2 #  from the system, and may remove any packages #  that depend on apache2. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"apache2\""
      }
    },
    "disabling_ipv6": {
      "tags": {
        "severity": "medium",
        "gid": "disabling_ipv6",
        "rid": "kernel_module_ipv6_option_disabled",
        "gtitle": "Disable Support for IPv6 Unless Needed",
        "fix_id": "kernel_module_ipv6_option_disabled"
      },
      "id": "disabling_ipv6",
      "title": [
        {
          "#text": "Disable IPv6 Networking Support Automatic Loading",
          "@_lang": "en-US"
        }
      ],
      "desc": "To prevent the IPv6 kernel module () from binding to the IPv6 networking stack, add the following line to(or another file in):This permits the IPv6 module to be loaded (and thus satisfy other modules that depend on it), while disabling support for the IPv6 protocol.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # Prevent the IPv6 kernel module (ipv6) from loading the IPv6 networking stack echo \"options ipv6 disable=1\" &gt; /etc/modprobe.d/ipv6.conf # Since according to: https://access.redhat.com/solutions/72733 # \"ipv6 disable=1\" options doesn't always disable the IPv6 networking stack from # loading, instruct also sysctl configuration to disable IPv6 according to: # https://access.redhat.com/solutions/8709#rhel6disable declare -a IPV6_SETTINGS=(\"net.ipv6.conf.all.disable_ipv6\" \"net.ipv6.conf.default.disable_ipv6\") for setting in \"${IPV6_SETTINGS[@]}\" do  # Set runtime =1 for setting  /sbin/sysctl -q -n -w \"$setting=1\"  # If setting is present in /etc/sysctl.conf, change value to \"1\"  # else, add \"$setting = 1\" to /etc/sysctl.conf  if grep -q ^\"$setting\" /etc/sysctl.conf ; then   sed -i \"s/^$setting.*/$setting = 1/g\" /etc/sysctl.conf  else   echo \"\" &gt;&gt; /etc/sysctl.conf   echo \"# Set $setting = 1 per security requirements\" &gt;&gt; /etc/sysctl.conf   echo \"$setting = 1\" &gt;&gt; /etc/sysctl.conf  fi done else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "disabling_netfs": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_netfs",
        "rid": "service_netfs_disabled",
        "gtitle": "Disable netfs if Possible",
        "fix_id": "service_netfs_disabled"
      },
      "id": "disabling_netfs",
      "title": [
        {
          "#text": "Disable Network File Systems (netfs)",
          "@_lang": "en-US"
        }
      ],
      "desc": "The netfs script manages the boot-time mounting of several types of networked filesystems, of which NFS and Samba are the most common. If these filesystem types are not in use, the script can be disabled, protecting the system somewhat against accidental or malicious changes toand against flaws in the netfs script itself. Theservice can be disabled with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" stop 'netfs.service' \"$SYSTEMCTL_EXEC\" disable 'netfs.service' \"$SYSTEMCTL_EXEC\" mask 'netfs.service' # Disable socket activation if we have a unit file for it if \"$SYSTEMCTL_EXEC\" list-unit-files | grep -q '^netfs.socket'; then \"$SYSTEMCTL_EXEC\" stop 'netfs.socket' \"$SYSTEMCTL_EXEC\" mask 'netfs.socket' fi # The service may not be running because it has been started and failed, # so let's reset the state so OVAL checks pass. # Service should be 'inactive', not 'failed' after reboot though. \"$SYSTEMCTL_EXEC\" reset-failed 'netfs.service' || true else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "disabling_nfs_services": {
      "tags": {
        "severity": "low",
        "gid": "disabling_nfs_services",
        "rid": "package_nfs-kernel-server_removed",
        "gtitle": "Disable Services Used Only by NFS",
        "fix_id": "package_nfs-kernel-server_removed"
      },
      "id": "disabling_nfs_services",
      "title": [
        {
          "#text": "Uninstall nfs-kernel-server Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # CAUTION: This remediation script will remove nfs-kernel-server #  from the system, and may remove any packages #  that depend on nfs-kernel-server. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"nfs-kernel-server\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "disabling_samba": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_samba",
        "rid": "package_samba_removed",
        "gtitle": "Disable Samba if Possible",
        "fix_id": "package_samba_removed"
      },
      "id": "disabling_samba",
      "title": [
        {
          "#text": "Uninstall Samba Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove samba #  from the system, and may remove any packages #  that depend on samba. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"samba\""
      }
    },
    "disabling_snmp_service": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_snmp_service",
        "rid": "package_net-snmp_removed",
        "gtitle": "Disable SNMP Server if Possible",
        "fix_id": "package_net-snmp_removed"
      },
      "id": "disabling_snmp_service",
      "title": [
        {
          "#text": "Uninstall net-snmp Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage provides the snmpd service. Thepackage can be removed with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove snmp #  from the system, and may remove any packages #  that depend on snmp. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"snmp\""
      }
    },
    "disabling_squid": {
      "tags": {
        "severity": "critical",
        "gid": "disabling_squid",
        "rid": "package_squid_removed",
        "gtitle": "Disable Squid if Possible",
        "fix_id": "package_squid_removed"
      },
      "id": "disabling_squid",
      "title": [
        {
          "#text": "Uninstall squid Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove squid #  from the system, and may remove any packages #  that depend on squid. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"squid\""
      }
    },
    "disabling_vsftpd": {
      "tags": {
        "severity": "high",
        "gid": "disabling_vsftpd",
        "rid": "package_vsftpd_removed",
        "gtitle": "Disable vsftpd if Possible",
        "fix_id": "package_vsftpd_removed"
      },
      "id": "disabling_vsftpd",
      "title": [
        {
          "#text": "Uninstall vsftpd Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.7,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove vsftpd #  from the system, and may remove any packages #  that depend on vsftpd. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"vsftpd\""
      }
    },
    "disabling_xwindows": {
      "tags": {
        "severity": "medium",
        "gid": "disabling_xwindows",
        "rid": "package_xorg-x11-server-common_removed",
        "gtitle": "Disable X Windows",
        "fix_id": "package_xorg-x11-server-common_removed"
      },
      "id": "disabling_xwindows",
      "title": [
        {
          "#text": "Remove the X Windows Package Group",
          "@_lang": "en-US"
        }
      ],
      "desc": "By removing the xorg-x11-server-common package, the system no longer has X Windows installed. If X Windows is not installed then the system cannot boot into graphical user mode. This prevents the system from being accidentally or maliciously booted into amode. To do so, run the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove xserver-xorg #  from the system, and may remove any packages #  that depend on xserver-xorg. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"xserver-xorg\""
      }
    },
    "disk_partitioning": {
      "tags": {
        "severity": "high",
        "gid": "disk_partitioning",
        "rid": "encrypt_partitions",
        "gtitle": "Disk Partitioning"
      },
      "id": "disk_partitioning",
      "title": [
        {
          "#text": "Encrypt Partitions",
          "@_lang": "en-US"
        }
      ],
      "desc": "Ubuntu 20.04 natively supports partition encryption through the Linux Unified Key Setup-on-disk-format (LUKS) technology. The easiest way to encrypt a partition is during installation time.For manual installations, select thecheckbox during partition creation to encrypt the partition. When this option is selected the system will prompt for a passphrase to use in decrypting the partition. The passphrase will subsequently need to be entered manually every time the system boots.Detailed information on encrypting partitions using LUKS or LUKS ciphers can be found on the Ubuntu 20.04 Documentation web site:.",
      "impact": 0.7,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "enable_execshield_settings": {
      "tags": {
        "severity": "medium",
        "gid": "enable_execshield_settings",
        "rid": "sysctl_kernel_kptr_restrict",
        "gtitle": "Enable ExecShield",
        "fix_id": "sysctl_kernel_kptr_restrict"
      },
      "id": "enable_execshield_settings",
      "title": [
        {
          "#text": "Restrict Exposed Kernel Pointer Addresses Access",
          "@_lang": "en-US"
        }
      ],
      "desc": "To set the runtime status of thekernel parameter, run the following command:To make sure that the setting is persistent, add the following line to a file in the directory:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # # Set runtime for kernel.kptr_restrict # /sbin/sysctl -q -n -w kernel.kptr_restrict=\"1\" # # If kernel.kptr_restrict present in /etc/sysctl.conf, change value to \"1\" # else, add \"kernel.kptr_restrict = 1\" to /etc/sysctl.conf # # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/sysctl.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^kernel.kptr_restrict\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"1\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^kernel.kptr_restrict\\\\&gt;\" \"/etc/sysctl.conf\"; then \"${sed_command[@]}\" \"s/^kernel.kptr_restrict\\\\&gt;.*/$formatted_output/gi\" \"/etc/sysctl.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/sysctl.conf\" &gt;&gt; \"/etc/sysctl.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/sysctl.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "enable_nx": {
      "tags": {
        "severity": "medium",
        "gid": "enable_nx",
        "rid": "ensure_xd_nx_support_enabled",
        "gtitle": "Enable Execute Disable (XD) or No Execute (NX) Support on x86 Systems"
      },
      "id": "enable_nx",
      "title": [
        {
          "#text": "Ensure XD/NX support is enabled",
          "@_lang": "en-US"
        }
      ],
      "desc": "Recent processors in the x86 family support the ability to prevent code execution on a per memory page basis. Generically and on AMD processors, this ability is called No Execute (NX), while on Intel processors it is called Execute Disable (XD). This ability can help prevent exploitation of buffer overflow vulnerabilities and should be activated whenever possible. Extra steps must be taken to ensure that this protection is enabled, particularly on 32-bit x86 systems. Other processors, such as Itanium and POWER, have included such support since inception and the standard kernel for those platforms supports the feature. Note: Ensure your system supports the XD or NX bit and has PAE support before implementing this recommendation as this may prevent it from booting if these are not supported by your hardware.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "endpoint_security_software": {
      "tags": {
        "severity": "medium",
        "gid": "endpoint_security_software",
        "rid": "configure_user_data_backups",
        "gtitle": "Endpoint Protection Software"
      },
      "id": "endpoint_security_software",
      "title": [
        {
          "#text": "Configure Backups of User Data",
          "@_lang": "en-US"
        }
      ],
      "desc": "The operating system must conduct backups of user data contained in the operating system. The operating system provides utilities for automating backups of user data. Commercial and open-source products are also available.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "ensure_rsyslog_log_file_configuration": {
      "tags": {
        "severity": "medium",
        "gid": "ensure_rsyslog_log_file_configuration",
        "rid": "rsyslog_encrypt_offload_actionsendstreamdriverauthmode",
        "gtitle": "Ensure Proper Configuration of Log Files"
      },
      "id": "ensure_rsyslog_log_file_configuration",
      "title": [
        {
          "#text": "Ensure Rsyslog Authenticates Off-Loaded Audit Records",
          "@_lang": "en-US"
        }
      ],
      "desc": "Rsyslogd is a system utility providing support for message logging. Support for both internet and UNIX domain sockets enables this utility to support both local and remote logging. Couple this utility with(which is a secure communications library implementing the SSL, TLS and DTLS protocols), and you have a method to securely encrypt and off-load auditing. When usingto off-load logs the remote system must be authenticated.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "entropy": {
      "tags": {
        "severity": "medium",
        "gid": "entropy",
        "rid": "kernel_disable_entropy_contribution_for_solid_state_drives",
        "gtitle": "Protect Random-Number Entropy Pool"
      },
      "id": "entropy",
      "title": [
        {
          "#text": "Ensure Solid State Drives Do Not Contribute To Random-Number Entropy Pool",
          "@_lang": "en-US"
        }
      ],
      "desc": "For each solid-state drive on the system, run:",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "files": {
      "tags": {
        "severity": "medium",
        "gid": "files",
        "rid": "dir_perms_world_writable_sticky_bits",
        "gtitle": "Verify Permissions on Important Files and Directories",
        "fix_id": "dir_perms_world_writable_sticky_bits"
      },
      "id": "files",
      "title": [
        {
          "#text": "Verify that All World-Writable Directories Have Sticky Bits Set",
          "@_lang": "en-US"
        }
      ],
      "desc": "When the so-called 'sticky bit' is set on a directory, only the owner of a given file may remove that file from the directory. Without the sticky bit, any user with write access to a directory may remove any file in the directory. Setting the sticky bit prevents users from removing each other's files. In cases where there is no reason for a directory to be world-writable, a better solution is to remove that permission rather than to set the sticky bit. However, if a directory is used by a particular application, consult that application's documentation instead of blindly changing modes.To set the sticky bit on a world-writable directory, run the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "df --local -P | awk '{if (NR!=1) print $6}' \\ | xargs -I '{}' find '{}' -xdev -type d \\ \\( -perm -0002 -a ! -perm -1000 \\) 2&gt;/dev/null \\ | xargs chmod a+t"
      }
    },
    "fips": {
      "tags": {
        "severity": "medium",
        "gid": "fips",
        "rid": "enable_dracut_fips_module",
        "gtitle": "Federal Information Processing Standard (FIPS)"
      },
      "id": "fips",
      "title": [
        {
          "#text": "Enable Dracut FIPS Module",
          "@_lang": "en-US"
        }
      ],
      "desc": "To enable FIPS mode, run the following command:To enable FIPS, the system requires that themodule is added inconfiguration. Check ifcontain",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "ftp_configure_vsftpd": {
      "tags": {
        "severity": "critical",
        "gid": "ftp_configure_vsftpd",
        "rid": "ftp_configure_firewall",
        "gtitle": "Configure vsftpd to Provide FTP Service if Necessary"
      },
      "id": "ftp_configure_vsftpd",
      "title": [
        {
          "#text": "Configure Firewalls to Protect the FTP Server",
          "@_lang": "en-US"
        }
      ],
      "desc": "By default,blocks access to the ports used by the web server. To configureto allow port 21 traffic, one must editand(if IPv6 is in use). Add the following line, ensuring that it appears before the final LOG and DROP lines for the INPUT chain:Edit the file. Ensure that the space-separated list of modules contains the FTP connection tracking module:",
      "impact": 1,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "ftp_restrict_users": {
      "tags": {
        "severity": "critical",
        "gid": "ftp_restrict_users",
        "rid": "ftp_limit_users",
        "gtitle": "Restrict the Set of Users Allowed to Access FTP"
      },
      "id": "ftp_restrict_users",
      "title": [
        {
          "#text": "Limit Users Allowed FTP Access if Necessary",
          "@_lang": "en-US"
        }
      ],
      "desc": "If there is a mission-critical reason for users to access their accounts via the insecure FTP protocol, limit the set of users who are allowed this access. Edit the vsftpd configuration file. Add or correct the following configuration options:Edit the file. For each user USERNAME who should be allowed to access the system via FTP, add a line containing that user's name:If anonymous access is also required, add the anonymous usernames toas well.",
      "impact": 1,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "gnome": {
      "tags": {
        "severity": "medium",
        "gid": "gnome",
        "rid": "package_gdm_removed",
        "gtitle": "GNOME Desktop Environment",
        "fix_id": "package_gdm_removed"
      },
      "id": "gnome",
      "title": [
        {
          "#text": "Remove the GDM Package Group",
          "@_lang": "en-US"
        }
      ],
      "desc": "By removing thepackage, the system no longer has GNOME installed installed. If X Windows is not installed then the system cannot boot into graphical user mode. This prevents the system from being accidentally or maliciously booted into amode. To do so, run the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'gdm3' 2&gt;/dev/null | grep -q installed; then # CAUTION: This remediation script will remove gdm3 #  from the system, and may remove any packages #  that depend on gdm3. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"gdm3\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "gnome_login_screen": {
      "tags": {
        "severity": "medium",
        "gid": "gnome_login_screen",
        "rid": "dconf_gnome_disable_user_list",
        "gtitle": "Configure GNOME Login Screen",
        "fix_id": "dconf_gnome_disable_user_list"
      },
      "id": "gnome_login_screen",
      "title": [
        {
          "#text": "Disable the GNOME3 Login User List",
          "@_lang": "en-US"
        }
      ],
      "desc": "In the default graphical environment, users logging directly into the system are greeted with a login screen that displays all known users. This functionality should be disabled by settingto.To disable, add or editto. For example:After the settings have been set, run.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'gdm3' 2&gt;/dev/null | grep -q installed &amp;&amp; { [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; }; then # Will do both approach, since we plan to migrate to checks over dconf db. That way, future updates of the tool # will pass the check even if we decide to check only for the dconf db path. if [ -e \"/etc/gdm3/greeter.dconf-defaults\" ] ; then LC_ALL=C sed -i \"/^\\s*disable\\-user\\-list/Id\" \"/etc/gdm3/greeter.dconf-defaults\" else touch \"/etc/gdm3/greeter.dconf-defaults\" fi cp \"/etc/gdm3/greeter.dconf-defaults\" \"/etc/gdm3/greeter.dconf-defaults.bak\" # Insert after the line matching the regex '\\[org/gnome/login-screen\\]' line_number=\"$(LC_ALL=C grep -n \"\\[org/gnome/login-screen\\]\" \"/etc/gdm3/greeter.dconf-defaults.bak\" | LC_ALL=C sed 's/:.*//g')\" if [ -z \"$line_number\" ]; then # There was no match of '\\[org/gnome/login-screen\\]', insert at # the end of the file. printf '%s ' \"disable-user-list=true\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" else head -n \"$(( line_number ))\" \"/etc/gdm3/greeter.dconf-defaults.bak\" &gt; \"/etc/gdm3/greeter.dconf-defaults\" printf '%s ' \"disable-user-list=true\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" tail -n \"+$(( line_number + 1 ))\" \"/etc/gdm3/greeter.dconf-defaults.bak\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" fi # Clean up after ourselves. rm \"/etc/gdm3/greeter.dconf-defaults.bak\" # Check for setting in any of the DConf db directories # If files contain ibus or distro, ignore them. # The assignment assumes that individual filenames don't contain : readarray -t SETTINGSFILES &lt; &lt;(grep -r \"\\\\[org/gnome/login-screen\\\\]\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) DCONFFILE=\"/etc/dconf/db/gdm.d/00-security-settings\" DBDIR=\"/etc/dconf/db/gdm.d\" mkdir -p \"${DBDIR}\" if [ \"${#SETTINGSFILES[@]}\" -eq 0 ] then [ ! -z ${DCONFFILE} ] || echo \"\" &gt;&gt; ${DCONFFILE} printf '%s ' \"[org/gnome/login-screen]\" &gt;&gt; ${DCONFFILE} printf '%s=%s ' \"disable-user-list\" \"true\" &gt;&gt; ${DCONFFILE} else escaped_value=\"$(sed -e 's/\\\\/\\\\\\\\/g' &lt;&lt;&lt; \"true\")\" if grep -q \"^\\\\s*disable-user-list\\\\s*=\" \"${SETTINGSFILES[@]}\" then sed -i \"s/\\\\s*disable-user-list\\\\s*=\\\\s*.*/disable-user-list=${escaped_value}/g\" \"${SETTINGSFILES[@]}\" else sed -i \"\\\\|\\\\[org/gnome/login-screen\\\\]|a\\\\disable-user-list=${escaped_value}\" \"${SETTINGSFILES[@]}\" fi fi dconf update # No need to use dconf update, since bash_dconf_settings does that already else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "gnome_screen_locking": {
      "tags": {
        "severity": "medium",
        "gid": "gnome_screen_locking",
        "rid": "dconf_gnome_screensaver_lock_enabled",
        "gtitle": "Configure GNOME Screen Locking",
        "fix_id": "dconf_gnome_screensaver_lock_enabled"
      },
      "id": "gnome_screen_locking",
      "title": [
        {
          "#text": "Enable GNOME3 Screensaver Lock After Idle Period",
          "@_lang": "en-US"
        }
      ],
      "desc": "To activate locking of the screensaver in the GNOME3 desktop when it is activated, add or settoin. For example:Once the settings have been added, add a lock toto prevent user modification. For example:After the settings have been set, run.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'gdm3' 2&gt;/dev/null | grep -q installed &amp;&amp; { [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; }; then # Check for setting in any of the DConf db directories # If files contain ibus or distro, ignore them. # The assignment assumes that individual filenames don't contain : readarray -t SETTINGSFILES &lt; &lt;(grep -r \"\\\\[org/gnome/desktop/screensaver\\\\]\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) DCONFFILE=\"/etc/dconf/db/local.d/00-security-settings\" DBDIR=\"/etc/dconf/db/local.d\" mkdir -p \"${DBDIR}\" if [ \"${#SETTINGSFILES[@]}\" -eq 0 ] then [ ! -z ${DCONFFILE} ] || echo \"\" &gt;&gt; ${DCONFFILE} printf '%s ' \"[org/gnome/desktop/screensaver]\" &gt;&gt; ${DCONFFILE} printf '%s=%s ' \"lock-enabled\" \"true\" &gt;&gt; ${DCONFFILE} else escaped_value=\"$(sed -e 's/\\\\/\\\\\\\\/g' &lt;&lt;&lt; \"true\")\" if grep -q \"^\\\\s*lock-enabled\\\\s*=\" \"${SETTINGSFILES[@]}\" then sed -i \"s/\\\\s*lock-enabled\\\\s*=\\\\s*.*/lock-enabled=${escaped_value}/g\" \"${SETTINGSFILES[@]}\" else sed -i \"\\\\|\\\\[org/gnome/desktop/screensaver\\\\]|a\\\\lock-enabled=${escaped_value}\" \"${SETTINGSFILES[@]}\" fi fi dconf update # Check for setting in any of the DConf db directories LOCKFILES=$(grep -r \"^/org/gnome/desktop/screensaver/lock-enabled$\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) LOCKSFOLDER=\"/etc/dconf/db/local.d/locks\" mkdir -p \"${LOCKSFOLDER}\" if [[ -z \"${LOCKFILES}\" ]] then echo \"/org/gnome/desktop/screensaver/lock-enabled\" &gt;&gt; \"/etc/dconf/db/local.d/locks/00-security-settings-lock\" fi dconf update else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "gnome_system_settings": {
      "tags": {
        "severity": "high",
        "gid": "gnome_system_settings",
        "rid": "dconf_gnome_disable_ctrlaltdel_reboot",
        "gtitle": "GNOME System Settings",
        "fix_id": "dconf_gnome_disable_ctrlaltdel_reboot"
      },
      "id": "gnome_system_settings",
      "title": [
        {
          "#text": "Disable Ctrl-Alt-Del Reboot Key Sequence in GNOME3",
          "@_lang": "en-US"
        }
      ],
      "desc": "By default,will reboot the system if thekey sequence is pressed.To configure the system to ignore thekey sequence from the Graphical User Interface (GUI) instead of rebooting the system, add or settoin. For example:Once the settings have been added, add a lock toto prevent user modification. For example:After the settings have been set, run.",
      "impact": 0.7,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'gdm3' 2&gt;/dev/null | grep -q installed &amp;&amp; { [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; }; then # Check for setting in any of the DConf db directories # If files contain ibus or distro, ignore them. # The assignment assumes that individual filenames don't contain : readarray -t SETTINGSFILES &lt; &lt;(grep -r \"\\\\[org/gnome/settings-daemon/plugins/media-keys\\\\]\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) DCONFFILE=\"/etc/dconf/db/local.d/00-security-settings\" DBDIR=\"/etc/dconf/db/local.d\" mkdir -p \"${DBDIR}\" if [ \"${#SETTINGSFILES[@]}\" -eq 0 ] then [ ! -z ${DCONFFILE} ] || echo \"\" &gt;&gt; ${DCONFFILE} printf '%s ' \"[org/gnome/settings-daemon/plugins/media-keys]\" &gt;&gt; ${DCONFFILE} printf '%s=%s ' \"logout\" \"''\" &gt;&gt; ${DCONFFILE} else escaped_value=\"$(sed -e 's/\\\\/\\\\\\\\/g' &lt;&lt;&lt; \"''\")\" if grep -q \"^\\\\s*logout\\\\s*=\" \"${SETTINGSFILES[@]}\" then sed -i \"s/\\\\s*logout\\\\s*=\\\\s*.*/logout=${escaped_value}/g\" \"${SETTINGSFILES[@]}\" else sed -i \"\\\\|\\\\[org/gnome/settings-daemon/plugins/media-keys\\\\]|a\\\\logout=${escaped_value}\" \"${SETTINGSFILES[@]}\" fi fi dconf update # Check for setting in any of the DConf db directories LOCKFILES=$(grep -r \"^/org/gnome/settings-daemon/plugins/media-keys/logout$\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) LOCKSFOLDER=\"/etc/dconf/db/local.d/locks\" mkdir -p \"${LOCKSFOLDER}\" if [[ -z \"${LOCKFILES}\" ]] then echo \"/org/gnome/settings-daemon/plugins/media-keys/logout\" &gt;&gt; \"/etc/dconf/db/local.d/locks/00-security-settings-lock\" fi dconf update else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "gui_login_banner": {
      "tags": {
        "severity": "medium",
        "gid": "gui_login_banner",
        "rid": "dconf_gnome_banner_enabled",
        "gtitle": "Implement a GUI Warning Banner",
        "fix_id": "dconf_gnome_banner_enabled"
      },
      "id": "gui_login_banner",
      "title": [
        {
          "#text": "Enable GNOME3 Login Warning Banner",
          "@_lang": "en-US"
        }
      ],
      "desc": "In the default graphical environment, displaying a login warning banner in the GNOME Display Manager's login screen can be enabled on the login screen by settingto.To enable, add or editto. For example:After the settings have been set, run. The banner text must also be set.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'gdm3' 2&gt;/dev/null | grep -q installed; then # Will do both approach, since we plan to migrate to checks over dconf db. That way, future updates of the tool # will pass the check even if we decide to check only for the dconf db path. if [ -e \"/etc/gdm3/greeter.dconf-defaults\" ] ; then LC_ALL=C sed -i \"/^\\s*banner\\-message\\-enable/Id\" \"/etc/gdm3/greeter.dconf-defaults\" else touch \"/etc/gdm3/greeter.dconf-defaults\" fi cp \"/etc/gdm3/greeter.dconf-defaults\" \"/etc/gdm3/greeter.dconf-defaults.bak\" # Insert after the line matching the regex '\\[org/gnome/login-screen\\]' line_number=\"$(LC_ALL=C grep -n \"\\[org/gnome/login-screen\\]\" \"/etc/gdm3/greeter.dconf-defaults.bak\" | LC_ALL=C sed 's/:.*//g')\" if [ -z \"$line_number\" ]; then # There was no match of '\\[org/gnome/login-screen\\]', insert at # the end of the file. printf '%s ' \"banner-message-enable=true\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" else head -n \"$(( line_number ))\" \"/etc/gdm3/greeter.dconf-defaults.bak\" &gt; \"/etc/gdm3/greeter.dconf-defaults\" printf '%s ' \"banner-message-enable=true\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" tail -n \"+$(( line_number + 1 ))\" \"/etc/gdm3/greeter.dconf-defaults.bak\" &gt;&gt; \"/etc/gdm3/greeter.dconf-defaults\" fi # Clean up after ourselves. rm \"/etc/gdm3/greeter.dconf-defaults.bak\" # Check for setting in any of the DConf db directories # If files contain ibus or distro, ignore them. # The assignment assumes that individual filenames don't contain : readarray -t SETTINGSFILES &lt; &lt;(grep -r \"\\\\[org/gnome/login-screen\\\\]\" \"/etc/dconf/db/\" | grep -v 'distro\\|ibus' | cut -d\":\" -f1) DCONFFILE=\"/etc/dconf/db/gdm.d/00-security-settings\" DBDIR=\"/etc/dconf/db/gdm.d\" mkdir -p \"${DBDIR}\" if [ \"${#SETTINGSFILES[@]}\" -eq 0 ] then [ ! -z ${DCONFFILE} ] || echo \"\" &gt;&gt; ${DCONFFILE} printf '%s ' \"[org/gnome/login-screen]\" &gt;&gt; ${DCONFFILE} printf '%s=%s ' \"banner-message-enable\" \"true\" &gt;&gt; ${DCONFFILE} else escaped_value=\"$(sed -e 's/\\\\/\\\\\\\\/g' &lt;&lt;&lt; \"true\")\" if grep -q \"^\\\\s*banner-message-enable\\\\s*=\" \"${SETTINGSFILES[@]}\" then sed -i \"s/\\\\s*banner-message-enable\\\\s*=\\\\s*.*/banner-message-enable=${escaped_value}/g\" \"${SETTINGSFILES[@]}\" else sed -i \"\\\\|\\\\[org/gnome/login-screen\\\\]|a\\\\banner-message-enable=${escaped_value}\" \"${SETTINGSFILES[@]}\" fi fi dconf update # No need to use dconf update, since bash_dconf_settings does that already else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "harden_exim4_config": {
      "tags": {
        "severity": "medium",
        "gid": "harden_exim4_config",
        "rid": "exim4_configtype_local",
        "gtitle": "Harden Local EXIM4 MTA Configuration",
        "fix_id": "exim4_configtype_local"
      },
      "id": "harden_exim4_config",
      "title": [
        {
          "#text": "Ensure EXIM4 is configured for local-only mode",
          "@_lang": "en-US"
        }
      ],
      "desc": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] &amp;&amp; { dpkg-query --show --showformat='${db:Status-Status} ' 'exim4' 2&gt;/dev/null | grep -q installed; }; then if [ -e \"/etc/exim4/update-exim4.conf.conf\" ] ; then LC_ALL=C sed -i \"/^dc_eximconfig_configtype=/d\" \"/etc/exim4/update-exim4.conf.conf\" else touch \"/etc/exim4/update-exim4.conf.conf\" fi cp \"/etc/exim4/update-exim4.conf.conf\" \"/etc/exim4/update-exim4.conf.conf.bak\" # Insert at the end of the file printf '%s ' \"dc_eximconfig_configtype=local\" &gt;&gt; \"/etc/exim4/update-exim4.conf.conf\" # Clean up after ourselves. rm \"/etc/exim4/update-exim4.conf.conf.bak\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "inetd_and_xinetd": {
      "tags": {
        "severity": "low",
        "gid": "inetd_and_xinetd",
        "rid": "package_openbsd-inetd_removed",
        "gtitle": "Xinetd",
        "fix_id": "package_openbsd-inetd_removed"
      },
      "id": "inetd_and_xinetd",
      "title": [
        {
          "#text": "Uninstall openbsd-inetd Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # CAUTION: This remediation script will remove openbsd-inetd #  from the system, and may remove any packages #  that depend on openbsd-inetd. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"openbsd-inetd\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "integrity": {
      "tags": {
        "severity": "medium",
        "gid": "integrity",
        "rid": "package_prelink_removed",
        "gtitle": "System and Software Integrity",
        "fix_id": "package_prelink_removed"
      },
      "id": "integrity",
      "title": [
        {
          "#text": "Disable Prelinking via removing prelink package",
          "@_lang": "en-US"
        }
      ],
      "desc": "The prelinking feature changes binaries in an attempt to decrease their startup time. In order to disable it, run the following command to return binaries to a normal, non-prelinked state:Then remove thepackage.",
      "impact": 0.5,
      "descs": {
        "fix": "if command -v prelink 2&gt;/dev/null &gt;/dev/null; then prelink -ua fi DEBIAN_FRONTEND=noninteractive apt-get remove -y \"prelink\""
      }
    },
    "iptables_activation": {
      "tags": {
        "severity": "medium",
        "gid": "iptables_activation",
        "rid": "service_ip6tables_enabled",
        "gtitle": "Inspect and Activate Default Rules",
        "fix_id": "service_ip6tables_enabled"
      },
      "id": "iptables_activation",
      "title": [
        {
          "#text": "Verify ip6tables Enabled if Using IPv6",
          "@_lang": "en-US"
        }
      ],
      "desc": "Theservice can be enabled with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_firewall_package='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] || [ \"$var_firewall_package\" == \"iptables\" ]; then SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" unmask 'ip6tables.service' \"$SYSTEMCTL_EXEC\" start 'ip6tables.service' \"$SYSTEMCTL_EXEC\" enable 'ip6tables.service' else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "iptables_ensure_loopback_configured": {
      "tags": {
        "severity": "medium",
        "gid": "iptables_ensure_loopback_configured",
        "rid": "ip6tables_allow_in_lo",
        "gtitle": "Ensure loopback traffic is configured",
        "fix_id": "ip6tables_allow_in_lo"
      },
      "id": "iptables_ensure_loopback_configured",
      "title": [
        {
          "#text": "Trafic in on lo is allowed",
          "@_lang": "en-US"
        }
      ],
      "desc": "ip6tables should be configured to allow all inbound traffic on the loopback interface.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_firewall_package='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] &amp;&amp; { [ \"$var_firewall_package\" == \"iptables\" ]; }; then if ! dpkg-query --show --showformat='${db:Status-Status} ' \"iptables\" 2&gt;/dev/null | grep -q installed; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"iptables\" fi if ! dpkg-query --show --showformat='${db:Status-Status} ' \"iptables-persistent\" 2&gt;/dev/null | grep -q installed; then debconf-set-selections &lt;&lt;&lt; \"iptables-persistent iptables-persistent/autosave_v4 boolean true\" debconf-set-selections &lt;&lt;&lt; \"iptables-persistent iptables-persistent/autosave_v6 boolean true\" DEBIAN_FRONTEND=noninteractive apt-get install -y \"iptables-persistent\" fi ip6tables -C INPUT -i lo -j ACCEPT 2&gt;/dev/null || ip6tables -A INPUT -i lo -j ACCEPT ip6tables-save -t filter &gt; /etc/iptables/rules.v6 else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "iptables_ruleset_modifications": {
      "tags": {
        "severity": "medium",
        "gid": "iptables_ruleset_modifications",
        "rid": "ip6tables_default_deny",
        "gtitle": "Strengthen the Default Ruleset"
      },
      "id": "iptables_ruleset_modifications",
      "title": [
        {
          "#text": "Ensure default deny firewall policy - iptables6",
          "@_lang": "en-US"
        }
      ],
      "desc": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage. Notes:",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "journald": {
      "tags": {
        "severity": "medium",
        "gid": "journald",
        "rid": "compress_large_logs",
        "gtitle": "Configure journald",
        "fix_id": "compress_large_logs"
      },
      "id": "journald",
      "title": [
        {
          "#text": "Ensure journald is configured to compress large log files",
          "@_lang": "en-US"
        }
      ],
      "desc": "The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large. Note: The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configs present, they override the main configuration parameters.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then if [ -e \"/etc/systemd/journald.conf\" ] ; then LC_ALL=C sed -i \"/^\\s*Compress=yes/Id\" \"/etc/systemd/journald.conf\" else touch \"/etc/systemd/journald.conf\" fi cp \"/etc/systemd/journald.conf\" \"/etc/systemd/journald.conf.bak\" # Insert at the end of the file printf '%s ' \"Compress=yes\" &gt;&gt; \"/etc/systemd/journald.conf\" # Clean up after ourselves. rm \"/etc/systemd/journald.conf.bak\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "kerberos": {
      "tags": {
        "severity": "medium",
        "gid": "kerberos",
        "rid": "kerberos_disable_no_keytab",
        "gtitle": "Kerberos",
        "fix_id": "kerberos_disable_no_keytab"
      },
      "id": "kerberos",
      "title": [
        {
          "#text": "Disable Kerberos by removing host keytab",
          "@_lang": "en-US"
        }
      ],
      "desc": "Kerberos is not an approved key distribution method for Common Criteria. To prevent using Kerberos by system daemons, remove the Kerberos keytab files, especially.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then rm -f /etc/*.keytab else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "locking_out_password_attempts": {
      "tags": {
        "severity": "medium",
        "gid": "locking_out_password_attempts",
        "rid": "accounts_password_pam_pwhistory_remember",
        "gtitle": "Set Lockouts for Failed Password Attempts",
        "fix_id": "accounts_password_pam_pwhistory_remember"
      },
      "id": "locking_out_password_attempts",
      "title": [
        {
          "#text": "Limit Password Reuse",
          "@_lang": "en-US"
        }
      ],
      "desc": "Do not allow users to reuse recent passwords. This can be accomplished by using theoption for thePAM modules.In the file, make sure the parametersis present, and that the value for theparameter isor greater. For example:The DoD STIG requirement is 5 passwords.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'libpam-runtime' 2&gt;/dev/null | grep -q installed; then var_password_pam_remember='' pamstr=$(egrep '^password\\s+required\\s+pam_pwhistory\\.so\\b.*\\bremember=' /etc/pam.d/common-password) if [ -z \"$pamstr\" ]; then echo \"password required pam_pwhistory.so remember=${var_password_pam_remember}\" &gt;&gt; /etc/pam.d/common-password else rememb_val=$(echo -n \"$pamstr\" | egrep -o '\\bremember=[0-9]+' | cut -d '=' -f 2) if [ -z \"${rememb_val}\" ] || [ ${rememb_val} -lt ${var_password_pam_remember} ]; then sed -E -i \"s/(^password\\s+required\\s+pam_pwhistory.so\\b.*\\bremember=)[0-9]*/\\1${var_password_pam_remember}/\" /etc/pam.d/common-password fi fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "log_rotation": {
      "tags": {
        "severity": "medium",
        "gid": "log_rotation",
        "rid": "ensure_logrotate_activated",
        "gtitle": "Ensure All Logs are Rotated by logrotate",
        "fix_id": "ensure_logrotate_activated"
      },
      "id": "log_rotation",
      "title": [
        {
          "#text": "Ensure Logrotate Runs Periodically",
          "@_lang": "en-US"
        }
      ],
      "desc": "Theutility allows for the automatic rotation of log files. The frequency of rotation is specified in, which triggers a cron task. To configure logrotate to run daily, add or correct the following line in:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then LOGROTATE_CONF_FILE=\"/etc/logrotate.conf\" CRON_DAILY_LOGROTATE_FILE=\"/etc/cron.daily/logrotate\" # daily rotation is configured grep -q \"^daily$\" $LOGROTATE_CONF_FILE|| echo \"daily\" &gt;&gt; $LOGROTATE_CONF_FILE # remove any line configuring weekly, monthly or yearly rotation sed -i '/^\\s*\\(weekly\\|monthly\\|yearly\\).*$/d' $LOGROTATE_CONF_FILE # configure cron.daily if not already if ! grep -q \"^[[:space:]]*/usr/sbin/logrotate[[:alnum:][:blank:][:punct:]]*$LOGROTATE_CONF_FILE$\" $CRON_DAILY_LOGROTATE_FILE; then  echo \"#!/bin/sh\" &gt; $CRON_DAILY_LOGROTATE_FILE  echo \"/usr/sbin/logrotate $LOGROTATE_CONF_FILE\" &gt;&gt; $CRON_DAILY_LOGROTATE_FILE fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "logging": {
      "tags": {
        "severity": "medium",
        "gid": "logging",
        "rid": "package_rsyslog_installed",
        "gtitle": "Configure Syslog",
        "fix_id": "package_rsyslog_installed"
      },
      "id": "logging",
      "title": [
        {
          "#text": "Ensure rsyslog is Installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "Rsyslog is installed by default. Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"rsyslog\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "mail": {
      "tags": {
        "severity": "critical",
        "gid": "mail",
        "rid": "service_postfix_enabled",
        "gtitle": "Mail Server Software",
        "fix_id": "service_postfix_enabled"
      },
      "id": "mail",
      "title": [
        {
          "#text": "Enable Postfix Service",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Postfix mail transfer agent is used for local mail delivery within the system. The default configuration only listens for connections to the default SMTP port (port 25) on the loopback interface (127.0.0.1). It is recommended to leave this service enabled for local mail delivery. Theservice can be enabled with the following command:",
      "impact": 1,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" unmask 'postfix.service' \"$SYSTEMCTL_EXEC\" start 'postfix.service' \"$SYSTEMCTL_EXEC\" enable 'postfix.service' else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "mcafee_hbss_software": {
      "tags": {
        "severity": "medium",
        "gid": "mcafee_hbss_software",
        "rid": "package_MFEhiplsm_installed",
        "gtitle": "McAfee Host-Based Intrusion Detection Software (HBSS)",
        "fix_id": "package_MFEhiplsm_installed"
      },
      "id": "mcafee_hbss_software",
      "title": [
        {
          "#text": "Install the Host Intrusion Prevention System (HIPS) Module",
          "@_lang": "en-US"
        }
      ],
      "desc": "Install the McAfee Host Intrusion Prevention System (HIPS) Module if it is absolutely necessary. If SELinux is enabled, do not install or enable this module.",
      "impact": 0.5,
      "descs": {
        "fix": "[[packages]] name = \"MFEhiplsm\" version = \"*\""
      }
    },
    "mcafee_security_software": {
      "tags": {
        "severity": "medium",
        "gid": "mcafee_security_software",
        "rid": "package_mfetp_installed",
        "gtitle": "McAfee Endpoint Security Software",
        "fix_id": "package_mfetp_installed"
      },
      "id": "mcafee_security_software",
      "title": [
        {
          "#text": "Install Endpoint Security for Linux Threat Prevention",
          "@_lang": "en-US"
        }
      ],
      "desc": "The operating system must deploy Endpoint Security for Linux Threat Prevention (ENSLTP).",
      "impact": 0.5,
      "descs": {
        "fix": "DEBIAN_FRONTEND=noninteractive apt-get install -y \"mfetp\""
      }
    },
    "mounting": {
      "tags": {
        "severity": "medium",
        "gid": "mounting",
        "rid": "service_autofs_disabled",
        "gtitle": "Restrict Dynamic Mounting and Unmounting of Filesystems",
        "fix_id": "service_autofs_disabled"
      },
      "id": "mounting",
      "title": [
        {
          "#text": "Disable the Automounter",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thedaemon mounts and unmounts filesystems, such as user home directories shared via NFS, on demand. In addition, autofs can be used to handle removable media, and the default configuration provides the cdrom device as. However, this method of providing access to removable media is not common, so autofs can almost always be disabled if NFS is not in use. Even if NFS is required, it may be possible to configure filesystem mounts statically by editingrather than relying on the automounter.Theservice can be disabled with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then SYSTEMCTL_EXEC='/usr/bin/systemctl' \"$SYSTEMCTL_EXEC\" stop 'autofs.service' \"$SYSTEMCTL_EXEC\" disable 'autofs.service' \"$SYSTEMCTL_EXEC\" mask 'autofs.service' # Disable socket activation if we have a unit file for it if \"$SYSTEMCTL_EXEC\" list-unit-files | grep -q '^autofs.socket'; then \"$SYSTEMCTL_EXEC\" stop 'autofs.socket' \"$SYSTEMCTL_EXEC\" mask 'autofs.socket' fi # The service may not be running because it has been started and failed, # so let's reset the state so OVAL checks pass. # Service should be 'inactive', not 'failed' after reboot though. \"$SYSTEMCTL_EXEC\" reset-failed 'autofs.service' || true else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network-iptables": {
      "tags": {
        "severity": "medium",
        "gid": "network-iptables",
        "rid": "package_iptables-persistent_installed",
        "gtitle": "iptables and ip6tables",
        "fix_id": "package_iptables-persistent_installed"
      },
      "id": "network-iptables",
      "title": [
        {
          "#text": "Install iptables-persistent Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_firewall_package='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] || [ \"$var_firewall_package\" == \"iptables\" ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"iptables-persistent\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network-nftables": {
      "tags": {
        "severity": "medium",
        "gid": "network-nftables",
        "rid": "package_nftables_installed",
        "gtitle": "nftables",
        "fix_id": "package_nftables_installed"
      },
      "id": "network-nftables",
      "title": [
        {
          "#text": "Install nftables Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_firewall_package='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] &amp;&amp; { [ \"$var_firewall_package\" == \"nftables\" ]; }; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"nftables\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network-ufw": {
      "tags": {
        "severity": "medium",
        "gid": "network-ufw",
        "rid": "package_ufw_installed",
        "gtitle": "Uncomplicated Firewall (ufw)",
        "fix_id": "package_ufw_installed"
      },
      "id": "network-ufw",
      "title": [
        {
          "#text": "Install ufw Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_firewall_package='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] &amp;&amp; { [ \"$var_firewall_package\" == \"ufw\" ]; }; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"ufw\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network-uncommon": {
      "tags": {
        "severity": "medium",
        "gid": "network-uncommon",
        "rid": "kernel_module_dccp_disabled",
        "gtitle": "Uncommon Network Protocols",
        "fix_id": "kernel_module_dccp_disabled"
      },
      "id": "network-uncommon",
      "title": [
        {
          "#text": "Disable DCCP Support",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Datagram Congestion Control Protocol (DCCP) is a relatively new transport layer protocol, designed to support streaming media and telephony. To configure the system to prevent thekernel module from being loaded, add the following line to a file in the directory:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then if LC_ALL=C grep -q -m 1 \"^install dccp\" /etc/modprobe.d/dccp.conf ; then    sed -i 's#^install dccp.*#install dccp /bin/true#g' /etc/modprobe.d/dccp.conf else  echo -e \" # Disable per security requirements\" &gt;&gt; /etc/modprobe.d/dccp.conf  echo \"install dccp /bin/true\" &gt;&gt; /etc/modprobe.d/dccp.conf fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network_host_and_router_parameters": {
      "tags": {
        "severity": "medium",
        "gid": "network_host_and_router_parameters",
        "rid": "sysctl_net_ipv4_conf_all_accept_redirects",
        "gtitle": "Network Related Kernel Runtime Parameters for Hosts and Routers",
        "fix_id": "sysctl_net_ipv4_conf_all_accept_redirects"
      },
      "id": "network_host_and_router_parameters",
      "title": [
        {
          "#text": "Disable Accepting ICMP Redirects for All IPv4 Interfaces",
          "@_lang": "en-US"
        }
      ],
      "desc": "To set the runtime status of thekernel parameter, run the following command:To make sure that the setting is persistent, add the following line to a file in the directory:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then sysctl_net_ipv4_conf_all_accept_redirects_value='' # # Set runtime for net.ipv4.conf.all.accept_redirects # /sbin/sysctl -q -n -w net.ipv4.conf.all.accept_redirects=\"$sysctl_net_ipv4_conf_all_accept_redirects_value\" # # If net.ipv4.conf.all.accept_redirects present in /etc/sysctl.conf, change value to appropriate value # else, add \"net.ipv4.conf.all.accept_redirects = value\" to /etc/sysctl.conf # # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/sysctl.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^net.ipv4.conf.all.accept_redirects\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"$sysctl_net_ipv4_conf_all_accept_redirects_value\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^net.ipv4.conf.all.accept_redirects\\\\&gt;\" \"/etc/sysctl.conf\"; then \"${sed_command[@]}\" \"s/^net.ipv4.conf.all.accept_redirects\\\\&gt;.*/$formatted_output/gi\" \"/etc/sysctl.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/sysctl.conf\" &gt;&gt; \"/etc/sysctl.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/sysctl.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network_host_parameters": {
      "tags": {
        "severity": "medium",
        "gid": "network_host_parameters",
        "rid": "sysctl_net_ipv4_conf_all_send_redirects",
        "gtitle": "Network Parameters for Hosts Only",
        "fix_id": "sysctl_net_ipv4_conf_all_send_redirects"
      },
      "id": "network_host_parameters",
      "title": [
        {
          "#text": "Disable Kernel Parameter for Sending ICMP Redirects on all IPv4 Interfaces",
          "@_lang": "en-US"
        }
      ],
      "desc": "To set the runtime status of thekernel parameter, run the following command:To make sure that the setting is persistent, add the following line to a file in the directory:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then # # Set runtime for net.ipv4.conf.all.send_redirects # /sbin/sysctl -q -n -w net.ipv4.conf.all.send_redirects=\"0\" # # If net.ipv4.conf.all.send_redirects present in /etc/sysctl.conf, change value to \"0\" # else, add \"net.ipv4.conf.all.send_redirects = 0\" to /etc/sysctl.conf # # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/sysctl.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^net.ipv4.conf.all.send_redirects\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"0\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^net.ipv4.conf.all.send_redirects\\\\&gt;\" \"/etc/sysctl.conf\"; then \"${sed_command[@]}\" \"s/^net.ipv4.conf.all.send_redirects\\\\&gt;.*/$formatted_output/gi\" \"/etc/sysctl.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/sysctl.conf\" &gt;&gt; \"/etc/sysctl.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/sysctl.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "network_ssl": {
      "tags": {
        "severity": "medium",
        "gid": "network_ssl",
        "rid": "only_allow_dod_certs",
        "gtitle": "Transport Layer Security Support"
      },
      "id": "network_ssl",
      "title": [
        {
          "#text": "Only Allow DoD PKI-established CAs",
          "@_lang": "en-US"
        }
      ],
      "desc": "The operating system must only allow the use of DoD PKI-established certificate authorities for verification of the establishment of protected sessions.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "nfs_configuring_servers": {
      "tags": {
        "severity": "low",
        "gid": "nfs_configuring_servers",
        "rid": "no_all_squash_exports",
        "gtitle": "Configure NFS Servers"
      },
      "id": "nfs_configuring_servers",
      "title": [
        {
          "#text": "Ensure All-Squashing Disabled On All Exports",
          "@_lang": "en-US"
        }
      ],
      "desc": "Themaps all uids and gids to an anonymous user. This should be disabled by removing any instances of theoption from the file.",
      "impact": 0.3,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "nftables_ensure_loopback_configured": {
      "tags": {
        "severity": "medium",
        "gid": "nftables_ensure_loopback_configured",
        "rid": "nftables_allow_in_lo",
        "gtitle": "Ensure loopback traffic is configured"
      },
      "id": "nftables_ensure_loopback_configured",
      "title": [
        {
          "#text": "Trafic in on lo is allowed",
          "@_lang": "en-US"
        }
      ],
      "desc": "nftables should be configured to allow all inbound traffic on the loopback interface.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "non-uefi": {
      "tags": {
        "severity": "medium",
        "gid": "non-uefi",
        "rid": "file_owner_grub2_cfg",
        "gtitle": "Non-UEFI GRUB2 bootloader configuration",
        "fix_id": "file_owner_grub2_cfg"
      },
      "id": "non-uefi",
      "title": [
        {
          "#text": "Verify /boot/grub/grub.cfg User Ownership",
          "@_lang": "en-US"
        }
      ],
      "desc": "The fileshould be owned by theuser to prevent destruction or modification of the file. To properly set the owner of, run the command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then chown 0 /boot/grub/grub.cfg else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "ntp": {
      "tags": {
        "severity": "medium",
        "gid": "ntp",
        "rid": "package_chrony_installed",
        "gtitle": "Network Time Protocol",
        "fix_id": "package_chrony_installed"
      },
      "id": "ntp",
      "title": [
        {
          "#text": "The Chrony package is installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them. Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms var_time_synchronization_daemon='' if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ] &amp;&amp; { [ \"$var_time_synchronization_daemon\" == \"chrony\" ]; }; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"chrony\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "obsolete": {
      "tags": {
        "severity": "low",
        "gid": "obsolete",
        "rid": "package_rsync_removed",
        "gtitle": "Obsolete Services",
        "fix_id": "package_rsync_removed"
      },
      "id": "obsolete",
      "title": [
        {
          "#text": "Uninstall rsync Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove rsync #  from the system, and may remove any packages #  that depend on rsync. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"rsync\""
      }
    },
    "openldap_client": {
      "tags": {
        "severity": "low",
        "gid": "openldap_client",
        "rid": "package_openldap-clients_removed",
        "gtitle": "Configure OpenLDAP Clients",
        "fix_id": "package_openldap-clients_removed"
      },
      "id": "openldap_client",
      "title": [
        {
          "#text": "Ensure LDAP client is not installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "The Lightweight Directory Access Protocol (LDAP) is a service that provides a method for looking up information from a central database. Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove ldap-utils #  from the system, and may remove any packages #  that depend on ldap-utils. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"ldap-utils\""
      }
    },
    "openldap_server": {
      "tags": {
        "severity": "low",
        "gid": "openldap_server",
        "rid": "package_openldap-servers_removed",
        "gtitle": "Configure OpenLDAP Server",
        "fix_id": "package_openldap-servers_removed"
      },
      "id": "openldap_server",
      "title": [
        {
          "#text": "Uninstall openldap-servers Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "The slapd package is not installed by default on a Ubuntu 20.04 system. It is needed only by the OpenLDAP server, not by the clients which use LDAP for authentication. If the system is not intended for use as an LDAP Server it should be removed.",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove slapd #  from the system, and may remove any packages #  that depend on slapd. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"slapd\""
      }
    },
    "partitions": {
      "tags": {
        "severity": "low",
        "gid": "partitions",
        "rid": "mount_option_dev_shm_nodev",
        "gtitle": "Restrict Partition Mount Options",
        "fix_id": "mount_option_dev_shm_nodev"
      },
      "id": "partitions",
      "title": [
        {
          "#text": "Add nodev Option to /dev/shm",
          "@_lang": "en-US"
        }
      ],
      "desc": "Themount option can be used to prevent creation of device files in. Legitimate character and block devices should not exist within temporary directories like. Add theoption to the fourth column offor the line which controls mounting of.",
      "impact": 0.3,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; theninclude_mount_options_functions function perform_remediation {  # test \"$mount_has_to_exist\" != 'no'  if test \"no\" != 'no'; then   assert_mount_point_in_fstab /dev/shm || { echo \"Not remediating, because there is no record of /dev/shm in /etc/fstab\" &gt;&amp;2; return 1; }  fi  ensure_mount_option_in_fstab \"/dev/shm\" \"nodev\" \"tmpfs\" \"tmpfs\"  ensure_partition_is_mounted \"/dev/shm\" } perform_remediation else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "password_expiration": {
      "tags": {
        "severity": "medium",
        "gid": "password_expiration",
        "rid": "accounts_maximum_age_login_defs",
        "gtitle": "Set Password Expiration Parameters",
        "fix_id": "accounts_maximum_age_login_defs"
      },
      "id": "password_expiration",
      "title": [
        {
          "#text": "Set Password Maximum Age",
          "@_lang": "en-US"
        }
      ],
      "desc": "To specify password maximum age for new accounts, edit the fileand add or correct the following line:A value of 180 days is sufficient for many environments. The DoD requirement is 60. The profile requirement is.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'login' 2&gt;/dev/null | grep -q installed; then var_accounts_maximum_age_login_defs='' grep -q ^PASS_MAX_DAYS /etc/login.defs &amp;&amp; \\ sed -i \"s/PASS_MAX_DAYS.*/PASS_MAX_DAYS $var_accounts_maximum_age_login_defs/g\" /etc/login.defs if ! [ $? -eq 0 ]; then echo \"PASS_MAX_DAYS $var_accounts_maximum_age_login_defs\" &gt;&gt; /etc/login.defs fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "password_quality_pwquality": {
      "tags": {
        "severity": "medium",
        "gid": "password_quality_pwquality",
        "rid": "accounts_password_pam_dcredit",
        "gtitle": "Set Password Quality Requirements with pam_pwquality",
        "fix_id": "accounts_password_pam_dcredit"
      },
      "id": "password_quality_pwquality",
      "title": [
        {
          "#text": "Ensure PAM Enforces Password Requirements - Minimum Digit Characters",
          "@_lang": "en-US"
        }
      ],
      "desc": "The pam_pwquality module'sparameter controls requirements for usage of digits in a password. When set to a negative number, any password will be required to contain that many digits. When set to a positive number, pam_pwquality will grant +1 additional length credit for each digit. Modify thesetting into require the use of a digit in passwords.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'libpam-runtime' 2&gt;/dev/null | grep -q installed; then var_password_pam_dcredit='' # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/security/pwquality.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^dcredit\") # shellcheck disable=SC2059 printf -v formatted_output \"%s = %s\" \"$stripped_key\" \"$var_password_pam_dcredit\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^dcredit\\\\&gt;\" \"/etc/security/pwquality.conf\"; then \"${sed_command[@]}\" \"s/^dcredit\\\\&gt;.*/$formatted_output/gi\" \"/etc/security/pwquality.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/security/pwquality.conf\" &gt;&gt; \"/etc/security/pwquality.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/security/pwquality.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "password_storage": {
      "tags": {
        "severity": "medium",
        "gid": "password_storage",
        "rid": "accounts_password_all_shadowed",
        "gtitle": "Verify Proper Storage and Existence of Password Hashes"
      },
      "id": "password_storage",
      "title": [
        {
          "#text": "Verify All Account Password Hashes are Shadowed",
          "@_lang": "en-US"
        }
      ],
      "desc": "If any password hashes are stored in(in the second field, instead of anor), the cause of this misconfiguration should be investigated. The account should have its password reset and the hash should be properly stored, or the account should be deleted entirely.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "permissions_important_account_files": {
      "tags": {
        "severity": "medium",
        "gid": "permissions_important_account_files",
        "rid": "file_groupowner_backup_etc_group",
        "gtitle": "Verify Permissions on Files with Local Account Information and Credentials",
        "fix_id": "file_groupowner_backup_etc_group"
      },
      "id": "permissions_important_account_files",
      "title": [
        {
          "#text": "Verify Group Who Owns Backup group File",
          "@_lang": "en-US"
        }
      ],
      "desc": "To properly set the group owner of, run the command:",
      "impact": 0.5,
      "descs": {
        "fix": "chgrp 0 /etc/group-"
      }
    },
    "permissions_var_log_dir": {
      "tags": {
        "severity": "medium",
        "gid": "permissions_var_log_dir",
        "rid": "file_groupowner_var_log",
        "gtitle": "Verify Permissions on Files within /var/log Directory",
        "fix_id": "file_groupowner_var_log"
      },
      "id": "permissions_var_log_dir",
      "title": [
        {
          "#text": "Verify Group Who Owns /var/log Directory",
          "@_lang": "en-US"
        }
      ],
      "desc": "To properly set the group owner of, run the command:",
      "impact": 0.5,
      "descs": {
        "fix": "chgrp 110 /var/log/"
      }
    },
    "permissions_within_important_dirs": {
      "tags": {
        "severity": "medium",
        "gid": "permissions_within_important_dirs",
        "rid": "dir_groupownership_binary_dirs",
        "gtitle": "Verify File Permissions Within Some Important Directories",
        "fix_id": "dir_groupownership_binary_dirs"
      },
      "id": "permissions_within_important_dirs",
      "title": [
        {
          "#text": "Verify that system commands directories are group owned by root",
          "@_lang": "en-US"
        }
      ],
      "desc": "System commands files are stored in the following directories by default:All these directories should be owned by thegroup. If the directory is found to be owned by a group other than root correct its ownership with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "chgrp 0 /bin/ chgrp 0 /sbin/ chgrp 0 /usr/bin/ chgrp 0 /usr/sbin/ chgrp 0 /usr/local/bin/ chgrp 0 /usr/local/sbin/"
      }
    },
    "postfix_client": {
      "tags": {
        "severity": "low",
        "gid": "postfix_client",
        "rid": "postfix_client_configure_mail_alias",
        "gtitle": "Configure SMTP For Mail Clients",
        "fix_id": "postfix_client_configure_mail_alias"
      },
      "id": "postfix_client",
      "title": [
        {
          "#text": "Configure System to Forward All Mail For The Root Account",
          "@_lang": "en-US"
        }
      ],
      "desc": "Make sure that mails delivered to root user are forwarded to a monitored email address. Make sure that the addressis a valid email address reachable from the system in question. Use the following command to configure the alias:",
      "impact": 0.3,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then var_postfix_root_mail_alias='' # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/aliases\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^root\") # shellcheck disable=SC2059 printf -v formatted_output \"%s: %s\" \"$stripped_key\" \"$var_postfix_root_mail_alias\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^root\\\\&gt;\" \"/etc/aliases\"; then \"${sed_command[@]}\" \"s/^root\\\\&gt;.*/$formatted_output/gi\" \"/etc/aliases\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/aliases\" &gt;&gt; \"/etc/aliases\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/aliases\" fi newaliases else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "printing": {
      "tags": {
        "severity": "low",
        "gid": "printing",
        "rid": "package_cups_removed",
        "gtitle": "Print Support",
        "fix_id": "package_cups_removed"
      },
      "id": "printing",
      "title": [
        {
          "#text": "Uninstall cups Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove cups #  from the system, and may remove any packages #  that depend on cups. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"cups\""
      }
    },
    "r_services": {
      "tags": {
        "severity": "high",
        "gid": "r_services",
        "rid": "package_rsh-server_removed",
        "gtitle": "Rlogin, Rsh, and Rexec",
        "fix_id": "package_rsh-server_removed"
      },
      "id": "r_services",
      "title": [
        {
          "#text": "Uninstall rsh-server Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be removed with the following command:",
      "impact": 0.7,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove rsh-server #  from the system, and may remove any packages #  that depend on rsh-server. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"rsh-server\""
      }
    },
    "restrict_at_cron_users": {
      "tags": {
        "severity": "medium",
        "gid": "restrict_at_cron_users",
        "rid": "file_groupowner_at_allow",
        "gtitle": "Restrict at and cron to Authorized Users if Necessary",
        "fix_id": "file_groupowner_at_allow"
      },
      "id": "restrict_at_cron_users",
      "title": [
        {
          "#text": "Verify Group Who Owns /etc/at.allow file",
          "@_lang": "en-US"
        }
      ],
      "desc": "Ifexists, it must be group-owned by. To properly set the group owner of, run the command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then chgrp 0 /etc/at.allow else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "root_logins": {
      "tags": {
        "severity": "medium",
        "gid": "root_logins",
        "rid": "accounts_no_gid_except_zero",
        "gtitle": "Restrict Root Logins",
        "fix_id": "accounts_no_gid_except_zero"
      },
      "id": "root_logins",
      "title": [
        {
          "#text": "Ensure default group for the root account is GID 0",
          "@_lang": "en-US"
        }
      ],
      "desc": "The usermod command can be used to specify which group the root user belongs to. This affects permissions of files that are created by the root user. Using GID 0 for the root account helps prevent root-owned files from accidentally becoming accessible to non-privileged users.",
      "impact": 0.5,
      "descs": {
        "fix": "usermod -g 0 root"
      }
    },
    "root_paths": {
      "tags": {
        "severity": "medium",
        "gid": "root_paths",
        "rid": "accounts_root_path_dirs_no_write",
        "gtitle": "Ensure that No Dangerous Directories Exist in Root's Path",
        "fix_id": "accounts_root_path_dirs_no_write"
      },
      "id": "root_paths",
      "title": [
        {
          "#text": "Ensure that Root's Path Does Not Include World or Group-Writable Directories",
          "@_lang": "en-US"
        }
      ],
      "desc": "For each element in root's path, run:and ensure that write permissions are disabled for group and other.",
      "impact": 0.5,
      "descs": {
        "fix": "fix_path() { local path_segments=\"${1//:/$' '}\" local new_path=\"\" local old_IFS=\"$IFS\" IFS=$' ' for path_part in $path_segments; do if [ -z \"${path_part}\" ] || [ \"${path_part}\" == \".\" ]; then continue fi local old_part=\"$(readlink -f \"${path_part}\")\" local have_part=\"false\" for new_part in ${new_path//:/$' '}; do if [ \"x${old_part}\" == \"x${new_part}\" ]; then have_part=\"true\" break fi done # Do this on the resolved part, not the original part. /bin/chmod o-w,g-w \"${old_part}\" if [ -z \"$new_path\" ]; then new_path=\"${old_part}\" else new_path=\"$new_path:${old_part}\" fi done IFS=\"${old_IFS}\" echo \"$new_path\" } PATH=\"$(fix_path \"$PATH\")\" profile_paths=\"/etc/skel/.profile /etc/environment /etc/crontab /etc/bash.bashrc /etc/profile /root/.profile /root/.bashrc\" /usr/bin/sed -i 's|^PATH=.*|PATH='\"$PATH\"'|g' $profile_paths /usr/bin/sed -i 's|^\\(.*\\s\\)PATH=.*|\\1PATH='\"$PATH\"'|g' $profile_paths defs_path=\"/etc/login.defs\" /usr/bin/sed -i 's|^\\(.*\\s\\)PATH=.*|\\1PATH='\"$PATH\"'|g' $defs_path"
      }
    },
    "rsyslog_accepting_remote_messages": {
      "tags": {
        "severity": "medium",
        "gid": "rsyslog_accepting_remote_messages",
        "rid": "package_syslogng_installed",
        "gtitle": "Configure rsyslogd to Accept Remote Messages If Acting as a Log Server",
        "fix_id": "package_syslogng_installed"
      },
      "id": "rsyslog_accepting_remote_messages",
      "title": [
        {
          "#text": "Ensure syslog-ng is Installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "syslog-ng can be installed in replacement of rsyslog. Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"syslogng\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "rsyslog_sending_messages": {
      "tags": {
        "severity": "medium",
        "gid": "rsyslog_sending_messages",
        "rid": "rsyslog_remote_loghost",
        "gtitle": "Rsyslog Logs Sent To Remote Host",
        "fix_id": "rsyslog_remote_loghost"
      },
      "id": "rsyslog_sending_messages",
      "title": [
        {
          "#text": "Ensure Logs Sent To Remote Host",
          "@_lang": "en-US"
        }
      ],
      "desc": "To configure rsyslog to send logs to a remote log server, openand read and understand the last section of the file, which describes the multiple directives necessary to activate remote logging. Along with these other directives, the system can be configured to forward its logs to a particular log server by adding or correcting one of the following lines, substitutingappropriately. The choice of protocol depends on the environment of the system; although TCP and RELP provide more reliable message delivery, they may not be supported in all environments.To use UDP for log message delivery:To use TCP for log message delivery:To use RELP for log message delivery:There must be a resolvable DNS CNAME or Alias record set to \"\" for logs to be sent correctly to the centralized logging utility.",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then rsyslog_remote_loghost_address='' # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed. # Otherwise, regular sed command will do. sed_command=('sed' '-i') if test -L \"/etc/rsyslog.conf\"; then sed_command+=('--follow-symlinks') fi # If the cce arg is empty, CCE is not assigned. if [ -z \"\" ]; then cce=\"CCE\" else cce=\"\" fi # Strip any search characters in the key arg so that the key can be replaced without # adding any search characters to the config file. stripped_key=$(sed 's/[\\^=\\$,;+]*//g' &lt;&lt;&lt; \"^\\*\\.\\*\") # shellcheck disable=SC2059 printf -v formatted_output \"%s %s\" \"$stripped_key\" \"@@$rsyslog_remote_loghost_address\" # If the key exists, change it. Otherwise, add it to the config_file. # We search for the key string followed by a word boundary (matched by \\&gt;), # so if we search for 'setting', 'setting2' won't match. if LC_ALL=C grep -q -m 1 -i -e \"^\\*\\.\\*\\\\&gt;\" \"/etc/rsyslog.conf\"; then \"${sed_command[@]}\" \"s/^\\*\\.\\*\\\\&gt;.*/$formatted_output/gi\" \"/etc/rsyslog.conf\" else # is precaution for case where file ends without trailing newline printf ' # Per %s: Set %s in %s ' \"$cce\" \"$formatted_output\" \"/etc/rsyslog.conf\" &gt;&gt; \"/etc/rsyslog.conf\" printf '%s ' \"$formatted_output\" &gt;&gt; \"/etc/rsyslog.conf\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "selinux": {
      "tags": {
        "severity": "medium",
        "gid": "selinux",
        "rid": "selinux_state",
        "gtitle": "SELinux"
      },
      "id": "selinux",
      "title": [
        {
          "#text": "Ensure SELinux State is Enforcing",
          "@_lang": "en-US"
        }
      ],
      "desc": "The SELinux state should be set toat system boot time. In the file, add or correct the following line to configure the system to boot into enforcing mode:",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "set_password_hashing_algorithm": {
      "tags": {
        "severity": "medium",
        "gid": "set_password_hashing_algorithm",
        "rid": "set_password_hashing_algorithm_logindefs",
        "gtitle": "Set Password Hashing Algorithm",
        "fix_id": "set_password_hashing_algorithm_logindefs"
      },
      "id": "set_password_hashing_algorithm",
      "title": [
        {
          "#text": "Set Password Hashing Algorithm in /etc/login.defs",
          "@_lang": "en-US"
        }
      ],
      "desc": "In, add or correct the following line to ensure the system will use SHA-512 as the hashing algorithm:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'login' 2&gt;/dev/null | grep -q installed; then var_password_hashing_algorithm='' if grep --silent ^ENCRYPT_METHOD /etc/login.defs ; then  sed -i \"s/^ENCRYPT_METHOD .*/ENCRYPT_METHOD $var_password_hashing_algorithm/g\" /etc/login.defs else  echo \"\" &gt;&gt; /etc/login.defs  echo \"ENCRYPT_METHOD $var_password_hashing_algorithm\" &gt;&gt; /etc/login.defs fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "smart_card_login": {
      "tags": {
        "severity": "medium",
        "gid": "smart_card_login",
        "rid": "package_opensc_installed",
        "gtitle": "Hardware Tokens for Authentication",
        "fix_id": "package_opensc_installed"
      },
      "id": "smart_card_login",
      "title": [
        {
          "#text": "Install the opensc Package For Multifactor Authentication",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"opensc-pkcs11\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "software": {
      "tags": {
        "severity": "medium",
        "gid": "software",
        "rid": "prefer_64bit_os",
        "gtitle": "Installing and Maintaining Software"
      },
      "id": "software",
      "title": [
        {
          "#text": "Prefer to use a 64-bit Operating System when supported",
          "@_lang": "en-US"
        }
      ],
      "desc": "Prefer installation of 64-bit operating systems when the CPU supports it.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "ssh": {
      "tags": {
        "severity": "medium",
        "gid": "ssh",
        "rid": "package_openssh-server_installed",
        "gtitle": "SSH Server",
        "fix_id": "package_openssh-server_installed"
      },
      "id": "ssh",
      "title": [
        {
          "#text": "Install the OpenSSH Server Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage should be installed. Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"openssh-server\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "ssh_server": {
      "tags": {
        "severity": "medium",
        "gid": "ssh_server",
        "rid": "disable_host_auth",
        "gtitle": "Configure OpenSSH Server if Necessary",
        "fix_id": "disable_host_auth"
      },
      "id": "ssh_server",
      "title": [
        {
          "#text": "Disable Host-Based Authentication",
          "@_lang": "en-US"
        }
      ],
      "desc": "SSH's cryptographic host-based authentication is more secure thanauthentication. However, it is not recommended that hosts unilaterally trust one another, even within an organization.To disable host-based authentication, add or correct the following line in:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then if [ -e \"/etc/ssh/sshd_config\" ] ; then LC_ALL=C sed -i \"/^\\s*HostbasedAuthentication\\s\\+/Id\" \"/etc/ssh/sshd_config\" else touch \"/etc/ssh/sshd_config\" fi cp \"/etc/ssh/sshd_config\" \"/etc/ssh/sshd_config.bak\" # Insert before the line matching the regex '^Match'. line_number=\"$(LC_ALL=C grep -n \"^Match\" \"/etc/ssh/sshd_config.bak\" | LC_ALL=C sed 's/:.*//g')\" if [ -z \"$line_number\" ]; then # There was no match of '^Match', insert at # the end of the file. printf '%s ' \"HostbasedAuthentication no\" &gt;&gt; \"/etc/ssh/sshd_config\" else head -n \"$(( line_number - 1 ))\" \"/etc/ssh/sshd_config.bak\" &gt; \"/etc/ssh/sshd_config\" printf '%s ' \"HostbasedAuthentication no\" &gt;&gt; \"/etc/ssh/sshd_config\" tail -n \"+$(( line_number ))\" \"/etc/ssh/sshd_config.bak\" &gt;&gt; \"/etc/ssh/sshd_config\" fi # Clean up after ourselves. rm \"/etc/ssh/sshd_config.bak\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "sshd_user_access_limited": {
      "tags": {
        "severity": "medium",
        "gid": "sshd_user_access_limited",
        "rid": "sshd_configure_allow_groups",
        "gtitle": "Ensure SSH Access is Limited",
        "fix_id": "sshd_configure_allow_groups"
      },
      "id": "sshd_user_access_limited",
      "title": [
        {
          "#text": "Restrict sshd user access via AllowGroups",
          "@_lang": "en-US"
        }
      ],
      "desc": "AllowGroups gives the system administrator the option of allowing specific groups to ssh into the system. - The list consists of space separated group names - Numeric group IDs are not recognized with this variable",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then var_sshd_allow_groups_valid='' # We don't add the default magic value to the sshd config file, since it's a security risk. default_value=\"e39d05b72f25767869d44391919434896bb055772d7969f74472032b03bc18418911f3b0e6dd47ff8f3b2323728225286c3cb36914d28dc7db40bdd786159c0a\" if [ \"${var_sshd_allow_groups_valid}\" != ${default_value} ]; then if [ -e \"/etc/ssh/sshd_config\" ] ; then LC_ALL=C sed -i \"/^\\s*AllowGroups\\s\\+/Id\" \"/etc/ssh/sshd_config\" else touch \"/etc/ssh/sshd_config\" fi cp \"/etc/ssh/sshd_config\" \"/etc/ssh/sshd_config.bak\" # Insert before the line matching the regex '^Match'. line_number=\"$(LC_ALL=C grep -n \"^Match\" \"/etc/ssh/sshd_config.bak\" | LC_ALL=C sed 's/:.*//g')\" if [ -z \"$line_number\" ]; then # There was no match of '^Match', insert at # the end of the file. printf '%s ' \"AllowGroups $var_sshd_allow_groups_valid\" &gt;&gt; \"/etc/ssh/sshd_config\" else head -n \"$(( line_number - 1 ))\" \"/etc/ssh/sshd_config.bak\" &gt; \"/etc/ssh/sshd_config\" printf '%s ' \"AllowGroups $var_sshd_allow_groups_valid\" &gt;&gt; \"/etc/ssh/sshd_config\" tail -n \"+$(( line_number ))\" \"/etc/ssh/sshd_config.bak\" &gt;&gt; \"/etc/ssh/sshd_config\" fi # Clean up after ourselves. rm \"/etc/ssh/sshd_config.bak\" fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "sssd": {
      "tags": {
        "severity": "medium",
        "gid": "sssd",
        "rid": "sssd_offline_cred_expiration",
        "gtitle": "System Security Services Daemon",
        "fix_id": "sssd_offline_cred_expiration"
      },
      "id": "sssd",
      "title": [
        {
          "#text": "Configure SSSD to Expire Offline Credentials",
          "@_lang": "en-US"
        }
      ],
      "desc": "SSSD should be configured to expire offline credentials after 1 day. To configure SSSD to expire offline credentials, settounder thesection in. For example:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if dpkg-query --show --showformat='${db:Status-Status} ' 'sssd-common' 2&gt;/dev/null | grep -q installed &amp;&amp; { [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; }; then SSSD_CONF=\"/etc/sssd/sssd.conf\" SSSD_OPT=\"offline_credentials_expiration\" SSSD_OPT_VAL=1 PAM_REGEX=\"[[:space:]]*\\[pam]\" PAM_OPT_REGEX=\"${PAM_REGEX}([^ \\[]* +)+?[[:space:]]*${SSSD_OPT}\" # Try find [pam] and offline_credentials_expiration in sssd.conf, if it exists # set it to 1, if it doesn't exist add it, if [pam] section doesn't exist add # the section and the configuration option. if grep -qzosP $PAM_OPT_REGEX $SSSD_CONF; then  sed -i \"s/${SSSD_OPT}[^( )]*/${SSSD_OPT} = ${SSSD_OPT_VAL}/\" $SSSD_CONF elif grep -qs $PAM_REGEX $SSSD_CONF; then  sed -i \"/$PAM_REGEX/a ${SSSD_OPT} = ${SSSD_OPT_VAL}\" $SSSD_CONF else  mkdir -p /etc/sssd  touch $SSSD_CONF  echo -e \"[pam] ${SSSD_OPT} = ${SSSD_OPT_VAL}\" &gt;&gt; $SSSD_CONF fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "sudo": {
      "tags": {
        "severity": "medium",
        "gid": "sudo",
        "rid": "package_sudo_installed",
        "gtitle": "Sudo",
        "fix_id": "package_sudo_installed"
      },
      "id": "sudo",
      "title": [
        {
          "#text": "Install sudo Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then DEBIAN_FRONTEND=noninteractive apt-get install -y \"sudo\" else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    },
    "system-tools": {
      "tags": {
        "severity": "medium",
        "gid": "system-tools",
        "rid": "package_gnutls-utils_installed",
        "gtitle": "System Tooling / Utilities",
        "fix_id": "package_gnutls-utils_installed"
      },
      "id": "system-tools",
      "title": [
        {
          "#text": "Ensure gnutls-utils is installed",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage can be installed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "DEBIAN_FRONTEND=noninteractive apt-get install -y \"gnutls-utils\""
      }
    },
    "talk": {
      "tags": {
        "severity": "medium",
        "gid": "talk",
        "rid": "package_talk_removed",
        "gtitle": "Chat/Messaging Services",
        "fix_id": "package_talk_removed"
      },
      "id": "talk",
      "title": [
        {
          "#text": "Uninstall talk Package",
          "@_lang": "en-US"
        }
      ],
      "desc": "Thepackage contains the client program for the Internet talk protocol, which allows the user to chat with other users on different systems. Talk is a communication program which copies lines from one terminal to the terminal of another user. Thepackage can be removed with the following command:",
      "impact": 0.5,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove talk #  from the system, and may remove any packages #  that depend on talk. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"talk\""
      }
    },
    "telnet": {
      "tags": {
        "severity": "low",
        "gid": "telnet",
        "rid": "package_telnet_removed",
        "gtitle": "Telnet",
        "fix_id": "package_telnet_removed"
      },
      "id": "telnet",
      "title": [
        {
          "#text": "Remove telnet Clients",
          "@_lang": "en-US"
        }
      ],
      "desc": "The telnet client allows users to start connections to other systems via the telnet protocol.",
      "impact": 0.3,
      "descs": {
        "fix": "# CAUTION: This remediation script will remove telnet #  from the system, and may remove any packages #  that depend on telnet. Execute this #  remediation AFTER testing on a non-production #  system! DEBIAN_FRONTEND=noninteractive apt-get remove -y \"telnet\""
      }
    },
    "uefi": {
      "tags": {
        "severity": "high",
        "gid": "uefi",
        "rid": "grub2_uefi_password",
        "gtitle": "UEFI GRUB2 bootloader configuration"
      },
      "id": "uefi",
      "title": [
        {
          "#text": "Set the UEFI Boot Loader Password",
          "@_lang": "en-US"
        }
      ],
      "desc": "The grub2 boot loader should have a superuser account and password protection enabled to protect boot-time settings.Since plaintext passwords are a security risk, generate a hash for the password by running the following command:When prompted, enter the password that was selected.Using the hash from the output, modify thefile with the following content:NOTE: the bootloader superuser account and password MUST differ from the root account and password. Once the superuser password has been added, update thefile by running:",
      "impact": 0.7,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "ufw_ensure_loopback_configured": {
      "tags": {
        "severity": "medium",
        "gid": "ufw_ensure_loopback_configured",
        "rid": "ufw_allow_in_lo",
        "gtitle": "Ensure loopback traffic is configured"
      },
      "id": "ufw_ensure_loopback_configured",
      "title": [
        {
          "#text": "Trafic in on lo is allowed",
          "@_lang": "en-US"
        }
      ],
      "desc": "UFW should be configured to allow all inbound traffic on the loopback interface.",
      "impact": 0.5,
      "descs": {
        "fix": "Missing fix text"
      }
    },
    "updating": {
      "tags": {
        "severity": "low",
        "gid": "updating",
        "rid": "clean_components_post_updating",
        "gtitle": "Updating Software",
        "fix_id": "clean_components_post_updating"
      },
      "id": "updating",
      "title": [
        {
          "#text": "Ensure apt_get Removes Previous Package Versions",
          "@_lang": "en-US"
        }
      ],
      "desc": "should be configured to remove previous software components after new versions have been installed. To configureto remove the previous software components after updating, set theandtoin.",
      "impact": 0.3,
      "descs": {
        "fix": "flag1=1 flag2=1 for file in /etc/apt/apt.conf.d/*; do if [ -e \"$file\" ]; then if grep -qi \"Unattended-Upgrade::Remove-Unused-Dependencies\" $file; then sed -i --follow-symlinks \"s/^.*Unattended-Upgrade::Remove-Unused-Dependencies.*/Unattended-Upgrade::Remove-Unused-Dependencies \\\"true\\\";/I\" $file flag1=0 fi if grep -qi \"Unattended-Upgrade::Remove-Unused-Kernel-Packages\" $file; then sed -i --follow-symlinks \"s/^.*Unattended-Upgrade::Remove-Unused-Kernel-Packages.*/Unattended-Upgrade::Remove-Unused-Kernel-Packages \\\"true\\\";/I\" $file flag2=0 fi fi done if [ $flag1 ] || [ $flag2 ]; then echo \"Unattended-Upgrade::Remove-Unused-Dependencies \\\"true\\\";\" &gt;&gt; /etc/apt/apt.conf.d/50unattended-upgrades echo \"Unattended-Upgrade::Remove-Unused-Kernel-Packages \\\"true\\\";\" &gt;&gt; /etc/apt/apt.conf.d/50unattended-upgrades fi"
      }
    },
    "user_umask": {
      "tags": {
        "severity": "medium",
        "gid": "user_umask",
        "rid": "accounts_umask_etc_bashrc",
        "gtitle": "Ensure that Users Have Sensible Umask Values",
        "fix_id": "accounts_umask_etc_bashrc"
      },
      "id": "user_umask",
      "title": [
        {
          "#text": "Ensure the Default Bash Umask is Set Correctly",
          "@_lang": "en-US"
        }
      ],
      "desc": "To ensure the default umask for users of the Bash shell is set properly, add or correct thesetting into read as follows:",
      "impact": 0.5,
      "descs": {
        "fix": "var_accounts_user_umask='' grep -q umask /etc/bashrc &amp;&amp; \\ sed -i \"s/umask.*/umask $var_accounts_user_umask/g\" /etc/bashrc if ! [ $? -eq 0 ]; then echo \"umask $var_accounts_user_umask\" &gt;&gt; /etc/bashrc fi"
      }
    },
    "wireless_software": {
      "tags": {
        "severity": "medium",
        "gid": "wireless_software",
        "rid": "wireless_disable_interfaces",
        "gtitle": "Disable Wireless Through Software Configuration",
        "fix_id": "wireless_disable_interfaces"
      },
      "id": "wireless_software",
      "title": [
        {
          "#text": "Deactivate Wireless Network Interfaces",
          "@_lang": "en-US"
        }
      ],
      "desc": "Deactivating wireless network interfaces should prevent normal usage of the wireless capability.Verify that there are no wireless interfaces configured on the system with the following command:For each interface, configure the system to disable wireless network interfaces with the following command:For each interface listed, find their respective module with the following command:wheremust be substituted by the actual interface name. Create a file in thedirectory and for each module, add the following line:For each module from the system, execute the following command to remove it:",
      "impact": 0.5,
      "descs": {
        "fix": "# Remediation is applicable only in certain platforms if [ ! -f /.dockerenv ] &amp;&amp; [ ! -f /run/.containerenv ]; then if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then interfaces=$(ls -L -d /sys/class/net/*/wireless | xargs dirname | xargs basename) for i in $interfaces; do ifdown $i drivers=$(basename $(readlink -f /sys/class/net/$i/device/driver)) echo \"install $drivers /bin/true\" &gt;&gt; /etc/modprobe.d/disable_wireless.conf modprobe -r $drivers done if command -v nmcli &gt;/dev/null 2&gt;&amp;1 ; then nmcli radio all off fi fi else &gt;&amp;2 echo 'Remediation is not applicable, nothing was done' fi"
      }
    }
  }
}